
AtoDconversion_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004170  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013470  08004308  08004308  00014308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017778  08017778  0003000c  2**0
                  CONTENTS
  4 .ARM          00000008  08017778  08017778  00027778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017780  08017780  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017780  08017780  00027780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017784  08017784  00027784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08017788  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  2000000c  08017794  0003000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08017794  00030170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010db5  00000000  00000000  0003003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002334  00000000  00000000  00040df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  00043128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  00043f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179f6  00000000  00000000  00044bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010132  00000000  00000000  0005c5ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b2a7  00000000  00000000  0006c720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  001079c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039d4  00000000  00000000  00107a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002fbc  00000000  00000000  0010b45c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080042f0 	.word	0x080042f0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080042f0 	.word	0x080042f0

080001d8 <arm_bitreversal_32>:
 80001d8:	1c4b      	adds	r3, r1, #1
 80001da:	2b01      	cmp	r3, #1
 80001dc:	bf98      	it	ls
 80001de:	4770      	bxls	lr
 80001e0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001e4:	1c91      	adds	r1, r2, #2
 80001e6:	089b      	lsrs	r3, r3, #2

080001e8 <arm_bitreversal_32_0>:
 80001e8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001ec:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f0:	880a      	ldrh	r2, [r1, #0]
 80001f2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001f6:	4480      	add	r8, r0
 80001f8:	4481      	add	r9, r0
 80001fa:	4402      	add	r2, r0
 80001fc:	4484      	add	ip, r0
 80001fe:	f8d9 7000 	ldr.w	r7, [r9]
 8000202:	f8d8 6000 	ldr.w	r6, [r8]
 8000206:	6815      	ldr	r5, [r2, #0]
 8000208:	f8dc 4000 	ldr.w	r4, [ip]
 800020c:	f8c9 6000 	str.w	r6, [r9]
 8000210:	f8c8 7000 	str.w	r7, [r8]
 8000214:	f8cc 5000 	str.w	r5, [ip]
 8000218:	6014      	str	r4, [r2, #0]
 800021a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800021e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000222:	6855      	ldr	r5, [r2, #4]
 8000224:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000228:	f8c9 6004 	str.w	r6, [r9, #4]
 800022c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000230:	f8cc 5004 	str.w	r5, [ip, #4]
 8000234:	6054      	str	r4, [r2, #4]
 8000236:	3108      	adds	r1, #8
 8000238:	3b01      	subs	r3, #1
 800023a:	d1d5      	bne.n	80001e8 <arm_bitreversal_32_0>
 800023c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000240:	4770      	bx	lr

08000242 <arm_bitreversal_16>:
 8000242:	1c4b      	adds	r3, r1, #1
 8000244:	2b01      	cmp	r3, #1
 8000246:	bf98      	it	ls
 8000248:	4770      	bxls	lr
 800024a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800024e:	1c91      	adds	r1, r2, #2
 8000250:	089b      	lsrs	r3, r3, #2

08000252 <arm_bitreversal_16_0>:
 8000252:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000256:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800025a:	880a      	ldrh	r2, [r1, #0]
 800025c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000260:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000264:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000268:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800026c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000270:	f8d9 7000 	ldr.w	r7, [r9]
 8000274:	f8d8 6000 	ldr.w	r6, [r8]
 8000278:	6815      	ldr	r5, [r2, #0]
 800027a:	f8dc 4000 	ldr.w	r4, [ip]
 800027e:	f8c9 6000 	str.w	r6, [r9]
 8000282:	f8c8 7000 	str.w	r7, [r8]
 8000286:	f8cc 5000 	str.w	r5, [ip]
 800028a:	6014      	str	r4, [r2, #0]
 800028c:	3108      	adds	r1, #8
 800028e:	3b01      	subs	r3, #1
 8000290:	d1df      	bne.n	8000252 <arm_bitreversal_16_0>
 8000292:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000296:	4770      	bx	lr

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b974 	b.w	8000598 <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002cc:	9d08      	ldr	r5, [sp, #32]
 80002ce:	4604      	mov	r4, r0
 80002d0:	468e      	mov	lr, r1
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d14d      	bne.n	8000372 <__udivmoddi4+0xaa>
 80002d6:	428a      	cmp	r2, r1
 80002d8:	4694      	mov	ip, r2
 80002da:	d969      	bls.n	80003b0 <__udivmoddi4+0xe8>
 80002dc:	fab2 f282 	clz	r2, r2
 80002e0:	b152      	cbz	r2, 80002f8 <__udivmoddi4+0x30>
 80002e2:	fa01 f302 	lsl.w	r3, r1, r2
 80002e6:	f1c2 0120 	rsb	r1, r2, #32
 80002ea:	fa20 f101 	lsr.w	r1, r0, r1
 80002ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f2:	ea41 0e03 	orr.w	lr, r1, r3
 80002f6:	4094      	lsls	r4, r2
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	0c21      	lsrs	r1, r4, #16
 80002fe:	fbbe f6f8 	udiv	r6, lr, r8
 8000302:	fa1f f78c 	uxth.w	r7, ip
 8000306:	fb08 e316 	mls	r3, r8, r6, lr
 800030a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800030e:	fb06 f107 	mul.w	r1, r6, r7
 8000312:	4299      	cmp	r1, r3
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x64>
 8000316:	eb1c 0303 	adds.w	r3, ip, r3
 800031a:	f106 30ff 	add.w	r0, r6, #4294967295
 800031e:	f080 811f 	bcs.w	8000560 <__udivmoddi4+0x298>
 8000322:	4299      	cmp	r1, r3
 8000324:	f240 811c 	bls.w	8000560 <__udivmoddi4+0x298>
 8000328:	3e02      	subs	r6, #2
 800032a:	4463      	add	r3, ip
 800032c:	1a5b      	subs	r3, r3, r1
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb3 f0f8 	udiv	r0, r3, r8
 8000334:	fb08 3310 	mls	r3, r8, r0, r3
 8000338:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800033c:	fb00 f707 	mul.w	r7, r0, r7
 8000340:	42a7      	cmp	r7, r4
 8000342:	d90a      	bls.n	800035a <__udivmoddi4+0x92>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 33ff 	add.w	r3, r0, #4294967295
 800034c:	f080 810a 	bcs.w	8000564 <__udivmoddi4+0x29c>
 8000350:	42a7      	cmp	r7, r4
 8000352:	f240 8107 	bls.w	8000564 <__udivmoddi4+0x29c>
 8000356:	4464      	add	r4, ip
 8000358:	3802      	subs	r0, #2
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	1be4      	subs	r4, r4, r7
 8000360:	2600      	movs	r6, #0
 8000362:	b11d      	cbz	r5, 800036c <__udivmoddi4+0xa4>
 8000364:	40d4      	lsrs	r4, r2
 8000366:	2300      	movs	r3, #0
 8000368:	e9c5 4300 	strd	r4, r3, [r5]
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	428b      	cmp	r3, r1
 8000374:	d909      	bls.n	800038a <__udivmoddi4+0xc2>
 8000376:	2d00      	cmp	r5, #0
 8000378:	f000 80ef 	beq.w	800055a <__udivmoddi4+0x292>
 800037c:	2600      	movs	r6, #0
 800037e:	e9c5 0100 	strd	r0, r1, [r5]
 8000382:	4630      	mov	r0, r6
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	fab3 f683 	clz	r6, r3
 800038e:	2e00      	cmp	r6, #0
 8000390:	d14a      	bne.n	8000428 <__udivmoddi4+0x160>
 8000392:	428b      	cmp	r3, r1
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xd4>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80f9 	bhi.w	800058e <__udivmoddi4+0x2c6>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb61 0303 	sbc.w	r3, r1, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	469e      	mov	lr, r3
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	d0e0      	beq.n	800036c <__udivmoddi4+0xa4>
 80003aa:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ae:	e7dd      	b.n	800036c <__udivmoddi4+0xa4>
 80003b0:	b902      	cbnz	r2, 80003b4 <__udivmoddi4+0xec>
 80003b2:	deff      	udf	#255	; 0xff
 80003b4:	fab2 f282 	clz	r2, r2
 80003b8:	2a00      	cmp	r2, #0
 80003ba:	f040 8092 	bne.w	80004e2 <__udivmoddi4+0x21a>
 80003be:	eba1 010c 	sub.w	r1, r1, ip
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2601      	movs	r6, #1
 80003cc:	0c20      	lsrs	r0, r4, #16
 80003ce:	fbb1 f3f7 	udiv	r3, r1, r7
 80003d2:	fb07 1113 	mls	r1, r7, r3, r1
 80003d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003da:	fb0e f003 	mul.w	r0, lr, r3
 80003de:	4288      	cmp	r0, r1
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x12c>
 80003e2:	eb1c 0101 	adds.w	r1, ip, r1
 80003e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x12a>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2c0>
 80003f2:	4643      	mov	r3, r8
 80003f4:	1a09      	subs	r1, r1, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003fc:	fb07 1110 	mls	r1, r7, r0, r1
 8000400:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x156>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 31ff 	add.w	r1, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x154>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2ca>
 800041c:	4608      	mov	r0, r1
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000426:	e79c      	b.n	8000362 <__udivmoddi4+0x9a>
 8000428:	f1c6 0720 	rsb	r7, r6, #32
 800042c:	40b3      	lsls	r3, r6
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa20 f407 	lsr.w	r4, r0, r7
 800043a:	fa01 f306 	lsl.w	r3, r1, r6
 800043e:	431c      	orrs	r4, r3
 8000440:	40f9      	lsrs	r1, r7
 8000442:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000446:	fa00 f306 	lsl.w	r3, r0, r6
 800044a:	fbb1 f8f9 	udiv	r8, r1, r9
 800044e:	0c20      	lsrs	r0, r4, #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fb09 1118 	mls	r1, r9, r8, r1
 8000458:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800045c:	fb08 f00e 	mul.w	r0, r8, lr
 8000460:	4288      	cmp	r0, r1
 8000462:	fa02 f206 	lsl.w	r2, r2, r6
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b8>
 8000468:	eb1c 0101 	adds.w	r1, ip, r1
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2bc>
 8000474:	4288      	cmp	r0, r1
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2bc>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4461      	add	r1, ip
 8000480:	1a09      	subs	r1, r1, r0
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb1 f0f9 	udiv	r0, r1, r9
 8000488:	fb09 1110 	mls	r1, r9, r0, r1
 800048c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000490:	fb00 fe0e 	mul.w	lr, r0, lr
 8000494:	458e      	cmp	lr, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1e2>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2b4>
 80004a2:	458e      	cmp	lr, r1
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2b4>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ae:	fba0 9402 	umull	r9, r4, r0, r2
 80004b2:	eba1 010e 	sub.w	r1, r1, lr
 80004b6:	42a1      	cmp	r1, r4
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46a6      	mov	lr, r4
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x2a4>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x2a0>
 80004c0:	b15d      	cbz	r5, 80004da <__udivmoddi4+0x212>
 80004c2:	ebb3 0208 	subs.w	r2, r3, r8
 80004c6:	eb61 010e 	sbc.w	r1, r1, lr
 80004ca:	fa01 f707 	lsl.w	r7, r1, r7
 80004ce:	fa22 f306 	lsr.w	r3, r2, r6
 80004d2:	40f1      	lsrs	r1, r6
 80004d4:	431f      	orrs	r7, r3
 80004d6:	e9c5 7100 	strd	r7, r1, [r5]
 80004da:	2600      	movs	r6, #0
 80004dc:	4631      	mov	r1, r6
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	40d8      	lsrs	r0, r3
 80004e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80004ec:	fa21 f303 	lsr.w	r3, r1, r3
 80004f0:	4091      	lsls	r1, r2
 80004f2:	4301      	orrs	r1, r0
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000500:	fb07 3610 	mls	r6, r7, r0, r3
 8000504:	0c0b      	lsrs	r3, r1, #16
 8000506:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800050a:	fb00 f60e 	mul.w	r6, r0, lr
 800050e:	429e      	cmp	r6, r3
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x260>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b8>
 8000520:	429e      	cmp	r6, r3
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b8>
 8000524:	3802      	subs	r0, #2
 8000526:	4463      	add	r3, ip
 8000528:	1b9b      	subs	r3, r3, r6
 800052a:	b289      	uxth	r1, r1
 800052c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000530:	fb07 3316 	mls	r3, r7, r6, r3
 8000534:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000538:	fb06 f30e 	mul.w	r3, r6, lr
 800053c:	428b      	cmp	r3, r1
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x28a>
 8000540:	eb1c 0101 	adds.w	r1, ip, r1
 8000544:	f106 38ff 	add.w	r8, r6, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2b0>
 800054a:	428b      	cmp	r3, r1
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2b0>
 800054e:	3e02      	subs	r6, #2
 8000550:	4461      	add	r1, ip
 8000552:	1ac9      	subs	r1, r1, r3
 8000554:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0x104>
 800055a:	462e      	mov	r6, r5
 800055c:	4628      	mov	r0, r5
 800055e:	e705      	b.n	800036c <__udivmoddi4+0xa4>
 8000560:	4606      	mov	r6, r0
 8000562:	e6e3      	b.n	800032c <__udivmoddi4+0x64>
 8000564:	4618      	mov	r0, r3
 8000566:	e6f8      	b.n	800035a <__udivmoddi4+0x92>
 8000568:	454b      	cmp	r3, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f8>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000574:	3801      	subs	r0, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f8>
 8000578:	4646      	mov	r6, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x28a>
 800057c:	4620      	mov	r0, r4
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1e2>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x260>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b8>
 8000588:	3b02      	subs	r3, #2
 800058a:	4461      	add	r1, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x12c>
 800058e:	4630      	mov	r0, r6
 8000590:	e709      	b.n	80003a6 <__udivmoddi4+0xde>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x156>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 fb48 	bl	8000c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f84c 	bl	8000640 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
 arm_rfft_fast_init_f32(&fft_handler,Full_buf);
 80005a8:	2104      	movs	r1, #4
 80005aa:	481c      	ldr	r0, [pc, #112]	; (800061c <main+0x80>)
 80005ac:	f002 fe2e 	bl	800320c <arm_rfft_fast_init_f32>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 f96c 	bl	800088c <MX_GPIO_Init>
  MX_ADC1_Init();
 80005b4:	f000 f8ac 	bl	8000710 <MX_ADC1_Init>
  MX_TIM9_Init();
 80005b8:	f000 f8fc 	bl	80007b4 <MX_TIM9_Init>
  MX_USART1_UART_Init();
 80005bc:	f000 f93c 	bl	8000838 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim9);
 80005c0:	4817      	ldr	r0, [pc, #92]	; (8000620 <main+0x84>)
 80005c2:	f001 ff03 	bl	80023cc <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  if(flag == 1)
 80005c6:	4b17      	ldr	r3, [pc, #92]	; (8000624 <main+0x88>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d1fb      	bne.n	80005c6 <main+0x2a>
	  {
		 if(R==0)
 80005ce:	4b16      	ldr	r3, [pc, #88]	; (8000628 <main+0x8c>)
 80005d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d103      	bne.n	80005e0 <main+0x44>
		 {
			 rdy_Row = 1;
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <main+0x90>)
 80005da:	2201      	movs	r2, #1
 80005dc:	701a      	strb	r2, [r3, #0]
 80005de:	e002      	b.n	80005e6 <main+0x4a>
		 }
		 else
		 {
			 rdy_Row = 0;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <main+0x90>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
		 }
		  memcpy(fft_buf,*(buf_in+rdy_Row) ,sizeof(fft_buf));
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <main+0x90>)
 80005e8:	f993 3000 	ldrsb.w	r3, [r3]
 80005ec:	011b      	lsls	r3, r3, #4
 80005ee:	4a10      	ldr	r2, [pc, #64]	; (8000630 <main+0x94>)
 80005f0:	4413      	add	r3, r2
 80005f2:	2210      	movs	r2, #16
 80005f4:	4619      	mov	r1, r3
 80005f6:	480f      	ldr	r0, [pc, #60]	; (8000634 <main+0x98>)
 80005f8:	f003 fe64 	bl	80042c4 <memcpy>
		  arm_rfft_fast_f32(&fft_handler,fft_buf,fft_buf_out,0);
 80005fc:	2300      	movs	r3, #0
 80005fe:	4a0e      	ldr	r2, [pc, #56]	; (8000638 <main+0x9c>)
 8000600:	490c      	ldr	r1, [pc, #48]	; (8000634 <main+0x98>)
 8000602:	4806      	ldr	r0, [pc, #24]	; (800061c <main+0x80>)
 8000604:	f002 fe84 	bl	8003310 <arm_rfft_fast_f32>
		  arm_cmplx_mag_squared_f32(fft_buf_out,Cmplt_Buf,Half_buf);
 8000608:	2202      	movs	r2, #2
 800060a:	490c      	ldr	r1, [pc, #48]	; (800063c <main+0xa0>)
 800060c:	480a      	ldr	r0, [pc, #40]	; (8000638 <main+0x9c>)
 800060e:	f003 faeb 	bl	8003be8 <arm_cmplx_mag_squared_f32>
		  flag = 0;
 8000612:	4b04      	ldr	r3, [pc, #16]	; (8000624 <main+0x88>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
	  if(flag == 1)
 8000618:	e7d5      	b.n	80005c6 <main+0x2a>
 800061a:	bf00      	nop
 800061c:	20000080 	.word	0x20000080
 8000620:	200000e0 	.word	0x200000e0
 8000624:	2000007e 	.word	0x2000007e
 8000628:	2000007c 	.word	0x2000007c
 800062c:	20000078 	.word	0x20000078
 8000630:	20000028 	.word	0x20000028
 8000634:	20000048 	.word	0x20000048
 8000638:	20000058 	.word	0x20000058
 800063c:	20000068 	.word	0x20000068

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	; 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	; 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f003 fe46 	bl	80042e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b27      	ldr	r3, [pc, #156]	; (8000708 <SystemClock_Config+0xc8>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	4a26      	ldr	r2, [pc, #152]	; (8000708 <SystemClock_Config+0xc8>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	; 0x40
 8000674:	4b24      	ldr	r3, [pc, #144]	; (8000708 <SystemClock_Config+0xc8>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b21      	ldr	r3, [pc, #132]	; (800070c <SystemClock_Config+0xcc>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a20      	ldr	r2, [pc, #128]	; (800070c <SystemClock_Config+0xcc>)
 800068a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1e      	ldr	r3, [pc, #120]	; (800070c <SystemClock_Config+0xcc>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a4:	2310      	movs	r3, #16
 80006a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a8:	2302      	movs	r3, #2
 80006aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b0:	2308      	movs	r3, #8
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006b4:	2332      	movs	r3, #50	; 0x32
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006bc:	2304      	movs	r3, #4
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 fa29 	bl	8001b1c <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d0:	f000 f94c 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	2101      	movs	r1, #1
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 fc8b 	bl	800200c <HAL_RCC_ClockConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006fc:	f000 f936 	bl	800096c <Error_Handler>
  }
}
 8000700:	bf00      	nop
 8000702:	3750      	adds	r7, #80	; 0x50
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000716:	463b      	mov	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000722:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <MX_ADC1_Init+0x9c>)
 8000726:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_ADC1_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800072e:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000734:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800073a:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <MX_ADC1_Init+0x98>)
 800073c:	2200      	movs	r2, #0
 800073e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000740:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_ADC1_Init+0x98>)
 800074a:	2200      	movs	r2, #0
 800074c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000750:	4a17      	ldr	r2, [pc, #92]	; (80007b0 <MX_ADC1_Init+0xa0>)
 8000752:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_ADC1_Init+0x98>)
 800075c:	2201      	movs	r2, #1
 800075e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_ADC1_Init+0x98>)
 800076a:	2201      	movs	r2, #1
 800076c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800076e:	480e      	ldr	r0, [pc, #56]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000770:	f000 fad2 	bl	8000d18 <HAL_ADC_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800077a:	f000 f8f7 	bl	800096c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800077e:	2301      	movs	r3, #1
 8000780:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000782:	2301      	movs	r3, #1
 8000784:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000786:	2307      	movs	r3, #7
 8000788:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078a:	463b      	mov	r3, r7
 800078c:	4619      	mov	r1, r3
 800078e:	4806      	ldr	r0, [pc, #24]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000790:	f000 fcf6 	bl	8001180 <HAL_ADC_ConfigChannel>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800079a:	f000 f8e7 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000098 	.word	0x20000098
 80007ac:	40012000 	.word	0x40012000
 80007b0:	0f000001 	.word	0x0f000001

080007b4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
 80007c8:	615a      	str	r2, [r3, #20]
 80007ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80007cc:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_TIM9_Init+0x7c>)
 80007ce:	4a19      	ldr	r2, [pc, #100]	; (8000834 <MX_TIM9_Init+0x80>)
 80007d0:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 50-1;
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_TIM9_Init+0x7c>)
 80007d4:	2231      	movs	r2, #49	; 0x31
 80007d6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d8:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_TIM9_Init+0x7c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 125-1;
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_TIM9_Init+0x7c>)
 80007e0:	227c      	movs	r2, #124	; 0x7c
 80007e2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_TIM9_Init+0x7c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_TIM9_Init+0x7c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 80007f0:	480f      	ldr	r0, [pc, #60]	; (8000830 <MX_TIM9_Init+0x7c>)
 80007f2:	f001 fe4d 	bl	8002490 <HAL_TIM_OC_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM9_Init+0x4c>
  {
    Error_Handler();
 80007fc:	f000 f8b6 	bl	800096c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2200      	movs	r2, #0
 8000814:	4619      	mov	r1, r3
 8000816:	4806      	ldr	r0, [pc, #24]	; (8000830 <MX_TIM9_Init+0x7c>)
 8000818:	f001 ff92 	bl	8002740 <HAL_TIM_OC_ConfigChannel>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 8000822:	f000 f8a3 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	3720      	adds	r7, #32
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000e0 	.word	0x200000e0
 8000834:	40014000 	.word	0x40014000

08000838 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_USART1_UART_Init+0x4c>)
 800083e:	4a12      	ldr	r2, [pc, #72]	; (8000888 <MX_USART1_UART_Init+0x50>)
 8000840:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_USART1_UART_Init+0x4c>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_USART1_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_USART1_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_USART1_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_USART1_UART_Init+0x4c>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_USART1_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_USART1_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_USART1_UART_Init+0x4c>)
 8000870:	f002 fa0a 	bl	8002c88 <HAL_UART_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800087a:	f000 f877 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000128 	.word	0x20000128
 8000888:	40011000 	.word	0x40011000

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_GPIO_Init+0x30>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a08      	ldr	r2, [pc, #32]	; (80008bc <MX_GPIO_Init+0x30>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_GPIO_Init+0x30>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800

080008c0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
  {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  HAL_ADC_Start_IT(&hadc1);
 80008c8:	4803      	ldr	r0, [pc, #12]	; (80008d8 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80008ca:	f000 fa69 	bl	8000da0 <HAL_ADC_Start_IT>
   }
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000098 	.word	0x20000098

080008dc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef*h)
  {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
//		int16_t buff_in[2][4] = {0};
//		int16_t i = 0;
	buf_in[R][i] = HAL_ADC_GetValue(&hadc1);
 80008e4:	481c      	ldr	r0, [pc, #112]	; (8000958 <HAL_ADC_ConvCpltCallback+0x7c>)
 80008e6:	f000 fc29 	bl	800113c <HAL_ADC_GetValue>
 80008ea:	ee07 0a90 	vmov	s15, r0
 80008ee:	4b1b      	ldr	r3, [pc, #108]	; (800095c <HAL_ADC_ConvCpltCallback+0x80>)
 80008f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008f4:	4618      	mov	r0, r3
 80008f6:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <HAL_ADC_ConvCpltCallback+0x84>)
 80008f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008fc:	4619      	mov	r1, r3
 80008fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000902:	4a18      	ldr	r2, [pc, #96]	; (8000964 <HAL_ADC_ConvCpltCallback+0x88>)
 8000904:	0083      	lsls	r3, r0, #2
 8000906:	440b      	add	r3, r1
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	4413      	add	r3, r2
 800090c:	edc3 7a00 	vstr	s15, [r3]
	i = i+1;
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <HAL_ADC_ConvCpltCallback+0x84>)
 8000912:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000916:	b29b      	uxth	r3, r3
 8000918:	3301      	adds	r3, #1
 800091a:	b29b      	uxth	r3, r3
 800091c:	b21a      	sxth	r2, r3
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <HAL_ADC_ConvCpltCallback+0x84>)
 8000920:	801a      	strh	r2, [r3, #0]
	if (i>=4)
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <HAL_ADC_ConvCpltCallback+0x84>)
 8000924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000928:	2b03      	cmp	r3, #3
 800092a:	dd11      	ble.n	8000950 <HAL_ADC_ConvCpltCallback+0x74>
	{
		i=0;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <HAL_ADC_ConvCpltCallback+0x84>)
 800092e:	2200      	movs	r2, #0
 8000930:	801a      	strh	r2, [r3, #0]
		flag = 1;
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000934:	2201      	movs	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
		if (R==0)
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_ADC_ConvCpltCallback+0x80>)
 800093a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d103      	bne.n	800094a <HAL_ADC_ConvCpltCallback+0x6e>
		{
			R = 1;
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_ADC_ConvCpltCallback+0x80>)
 8000944:	2201      	movs	r2, #1
 8000946:	801a      	strh	r2, [r3, #0]
		{
			R = 0;
		}

	}
  }
 8000948:	e002      	b.n	8000950 <HAL_ADC_ConvCpltCallback+0x74>
			R = 0;
 800094a:	4b04      	ldr	r3, [pc, #16]	; (800095c <HAL_ADC_ConvCpltCallback+0x80>)
 800094c:	2200      	movs	r2, #0
 800094e:	801a      	strh	r2, [r3, #0]
  }
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000098 	.word	0x20000098
 800095c:	2000007c 	.word	0x2000007c
 8000960:	2000007a 	.word	0x2000007a
 8000964:	20000028 	.word	0x20000028
 8000968:	2000007e 	.word	0x2000007e

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	e7fe      	b.n	8000974 <Error_Handler+0x8>
	...

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <HAL_MspInit+0x4c>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098c:	6453      	str	r3, [r2, #68]	; 0x44
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <HAL_MspInit+0x4c>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a1b      	ldr	r2, [pc, #108]	; (8000a54 <HAL_ADC_MspInit+0x8c>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d12f      	bne.n	8000a4a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <HAL_ADC_MspInit+0x90>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a19      	ldr	r2, [pc, #100]	; (8000a58 <HAL_ADC_MspInit+0x90>)
 80009f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <HAL_ADC_MspInit+0x90>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <HAL_ADC_MspInit+0x90>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <HAL_ADC_MspInit+0x90>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <HAL_ADC_MspInit+0x90>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a22:	2302      	movs	r3, #2
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a26:	2303      	movs	r3, #3
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	4809      	ldr	r0, [pc, #36]	; (8000a5c <HAL_ADC_MspInit+0x94>)
 8000a36:	f000 feed 	bl	8001814 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2012      	movs	r0, #18
 8000a40:	f000 feb1 	bl	80017a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000a44:	2012      	movs	r0, #18
 8000a46:	f000 feca 	bl	80017de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a4a:	bf00      	nop
 8000a4c:	3728      	adds	r7, #40	; 0x28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40012000 	.word	0x40012000
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020000 	.word	0x40020000

08000a60 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM9)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0e      	ldr	r2, [pc, #56]	; (8000aa8 <HAL_TIM_OC_MspInit+0x48>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d115      	bne.n	8000a9e <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <HAL_TIM_OC_MspInit+0x4c>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a0c      	ldr	r2, [pc, #48]	; (8000aac <HAL_TIM_OC_MspInit+0x4c>)
 8000a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <HAL_TIM_OC_MspInit+0x4c>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2100      	movs	r1, #0
 8000a92:	2018      	movs	r0, #24
 8000a94:	f000 fe87 	bl	80017a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000a98:	2018      	movs	r0, #24
 8000a9a:	f000 fea0 	bl	80017de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40014000 	.word	0x40014000
 8000aac:	40023800 	.word	0x40023800

08000ab0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a19      	ldr	r2, [pc, #100]	; (8000b34 <HAL_UART_MspInit+0x84>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d12c      	bne.n	8000b2c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000adc:	f043 0310 	orr.w	r3, r3, #16
 8000ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	f003 0310 	and.w	r3, r3, #16
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a10      	ldr	r2, [pc, #64]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b1c:	2307      	movs	r3, #7
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4619      	mov	r1, r3
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <HAL_UART_MspInit+0x8c>)
 8000b28:	f000 fe74 	bl	8001814 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3728      	adds	r7, #40	; 0x28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40011000 	.word	0x40011000
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020000 	.word	0x40020000

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <NMI_Handler+0x4>

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <MemManage_Handler+0x4>

08000b52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8c:	f000 f8a4 	bl	8000cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <ADC_IRQHandler+0x10>)
 8000b9a:	f000 f9bf 	bl	8000f1c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000098 	.word	0x20000098

08000ba8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000bae:	f001 fcbe 	bl	800252e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200000e0 	.word	0x200000e0

08000bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <SystemInit+0x20>)
 8000bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <SystemInit+0x20>)
 8000bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be4:	480d      	ldr	r0, [pc, #52]	; (8000c1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000be6:	490e      	ldr	r1, [pc, #56]	; (8000c20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000be8:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bfc:	4c0b      	ldr	r4, [pc, #44]	; (8000c2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c0a:	f7ff ffd7 	bl	8000bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c0e:	f003 fb35 	bl	800427c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c12:	f7ff fcc3 	bl	800059c <main>
  bx  lr    
 8000c16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c24:	08017788 	.word	0x08017788
  ldr r2, =_sbss
 8000c28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c2c:	20000170 	.word	0x20000170

08000c30 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <DMA1_Stream0_IRQHandler>
	...

08000c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <HAL_Init+0x40>)
 8000c3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c44:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <HAL_Init+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <HAL_Init+0x40>)
 8000c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <HAL_Init+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <HAL_Init+0x40>)
 8000c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	f000 fd97 	bl	8001790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c62:	200f      	movs	r0, #15
 8000c64:	f000 f808 	bl	8000c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c68:	f7ff fe86 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023c00 	.word	0x40023c00

08000c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_InitTick+0x54>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_InitTick+0x58>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 fdaf 	bl	80017fa <HAL_SYSTICK_Config>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e00e      	b.n	8000cc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b0f      	cmp	r3, #15
 8000caa:	d80a      	bhi.n	8000cc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cac:	2200      	movs	r2, #0
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	f000 fd77 	bl	80017a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb8:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <HAL_InitTick+0x5c>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e000      	b.n	8000cc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	20000004 	.word	0x20000004

08000cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x20>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x24>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <HAL_IncTick+0x24>)
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	2000016c 	.word	0x2000016c

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <HAL_GetTick+0x14>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	2000016c 	.word	0x2000016c

08000d18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d20:	2300      	movs	r3, #0
 8000d22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d101      	bne.n	8000d2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e033      	b.n	8000d96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d109      	bne.n	8000d4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff fe46 	bl	80009c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	f003 0310 	and.w	r3, r3, #16
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d118      	bne.n	8000d88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d5e:	f023 0302 	bic.w	r3, r3, #2
 8000d62:	f043 0202 	orr.w	r2, r3, #2
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f000 fb3a 	bl	80013e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f023 0303 	bic.w	r3, r3, #3
 8000d7e:	f043 0201 	orr.w	r2, r3, #1
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	641a      	str	r2, [r3, #64]	; 0x40
 8000d86:	e001      	b.n	8000d8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000da8:	2300      	movs	r3, #0
 8000daa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d101      	bne.n	8000dba <HAL_ADC_Start_IT+0x1a>
 8000db6:	2302      	movs	r3, #2
 8000db8:	e0a1      	b.n	8000efe <HAL_ADC_Start_IT+0x15e>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d018      	beq.n	8000e02 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f042 0201 	orr.w	r2, r2, #1
 8000dde:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000de0:	4b4a      	ldr	r3, [pc, #296]	; (8000f0c <HAL_ADC_Start_IT+0x16c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a4a      	ldr	r2, [pc, #296]	; (8000f10 <HAL_ADC_Start_IT+0x170>)
 8000de6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dea:	0c9a      	lsrs	r2, r3, #18
 8000dec:	4613      	mov	r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	4413      	add	r3, r2
 8000df2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000df4:	e002      	b.n	8000dfc <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1f9      	bne.n	8000df6 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d169      	bne.n	8000ee4 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e18:	f023 0301 	bic.w	r3, r3, #1
 8000e1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d007      	beq.n	8000e42 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e4e:	d106      	bne.n	8000e5e <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e54:	f023 0206 	bic.w	r2, r3, #6
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	645a      	str	r2, [r3, #68]	; 0x44
 8000e5c:	e002      	b.n	8000e64 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e6c:	4b29      	ldr	r3, [pc, #164]	; (8000f14 <HAL_ADC_Start_IT+0x174>)
 8000e6e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000e78:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	6812      	ldr	r2, [r2, #0]
 8000e84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e88:	f043 0320 	orr.w	r3, r3, #32
 8000e8c:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 031f 	and.w	r3, r3, #31
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10f      	bne.n	8000eba <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d129      	bne.n	8000efc <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	e020      	b.n	8000efc <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a16      	ldr	r2, [pc, #88]	; (8000f18 <HAL_ADC_Start_IT+0x178>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d11b      	bne.n	8000efc <HAL_ADC_Start_IT+0x15c>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d114      	bne.n	8000efc <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	e00b      	b.n	8000efc <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	f043 0210 	orr.w	r2, r3, #16
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef4:	f043 0201 	orr.w	r2, r3, #1
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	431bde83 	.word	0x431bde83
 8000f14:	40012300 	.word	0x40012300
 8000f18:	40012000 	.word	0x40012000

08000f1c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	f003 0320 	and.w	r3, r3, #32
 8000f4a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d049      	beq.n	8000fe6 <HAL_ADC_IRQHandler+0xca>
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d046      	beq.n	8000fe6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	f003 0310 	and.w	r3, r3, #16
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d105      	bne.n	8000f70 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d12b      	bne.n	8000fd6 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d127      	bne.n	8000fd6 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d006      	beq.n	8000fa2 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d119      	bne.n	8000fd6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 0220 	bic.w	r2, r2, #32
 8000fb0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d105      	bne.n	8000fd6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f043 0201 	orr.w	r2, r3, #1
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff fc80 	bl	80008dc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f06f 0212 	mvn.w	r2, #18
 8000fe4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d057      	beq.n	80010ac <HAL_ADC_IRQHandler+0x190>
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d054      	beq.n	80010ac <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f003 0310 	and.w	r3, r3, #16
 800100a:	2b00      	cmp	r3, #0
 800100c:	d105      	bne.n	800101a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d139      	bne.n	800109c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001032:	2b00      	cmp	r3, #0
 8001034:	d006      	beq.n	8001044 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001040:	2b00      	cmp	r3, #0
 8001042:	d12b      	bne.n	800109c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800104e:	2b00      	cmp	r3, #0
 8001050:	d124      	bne.n	800109c <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800105c:	2b00      	cmp	r3, #0
 800105e:	d11d      	bne.n	800109c <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001064:	2b00      	cmp	r3, #0
 8001066:	d119      	bne.n	800109c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001076:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800108c:	2b00      	cmp	r3, #0
 800108e:	d105      	bne.n	800109c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f043 0201 	orr.w	r2, r3, #1
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 fa9d 	bl	80015dc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f06f 020c 	mvn.w	r2, #12
 80010aa:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ba:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d017      	beq.n	80010f2 <HAL_ADC_IRQHandler+0x1d6>
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d014      	beq.n	80010f2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d10d      	bne.n	80010f2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 f837 	bl	8001156 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f06f 0201 	mvn.w	r2, #1
 80010f0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f003 0320 	and.w	r3, r3, #32
 80010f8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001100:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d015      	beq.n	8001134 <HAL_ADC_IRQHandler+0x218>
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d012      	beq.n	8001134 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f043 0202 	orr.w	r2, r3, #2
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f06f 0220 	mvn.w	r2, #32
 8001122:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 f820 	bl	800116a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f06f 0220 	mvn.w	r2, #32
 8001132:	601a      	str	r2, [r3, #0]
  }
}
 8001134:	bf00      	nop
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001194:	2b01      	cmp	r3, #1
 8001196:	d101      	bne.n	800119c <HAL_ADC_ConfigChannel+0x1c>
 8001198:	2302      	movs	r3, #2
 800119a:	e113      	b.n	80013c4 <HAL_ADC_ConfigChannel+0x244>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2201      	movs	r2, #1
 80011a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b09      	cmp	r3, #9
 80011aa:	d925      	bls.n	80011f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	68d9      	ldr	r1, [r3, #12]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	461a      	mov	r2, r3
 80011ba:	4613      	mov	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	4413      	add	r3, r2
 80011c0:	3b1e      	subs	r3, #30
 80011c2:	2207      	movs	r2, #7
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43da      	mvns	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	400a      	ands	r2, r1
 80011d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	68d9      	ldr	r1, [r3, #12]
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	4618      	mov	r0, r3
 80011e4:	4603      	mov	r3, r0
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4403      	add	r3, r0
 80011ea:	3b1e      	subs	r3, #30
 80011ec:	409a      	lsls	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	e022      	b.n	800123e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6919      	ldr	r1, [r3, #16]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	b29b      	uxth	r3, r3
 8001204:	461a      	mov	r2, r3
 8001206:	4613      	mov	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4413      	add	r3, r2
 800120c:	2207      	movs	r2, #7
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	400a      	ands	r2, r1
 800121a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6919      	ldr	r1, [r3, #16]
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	b29b      	uxth	r3, r3
 800122c:	4618      	mov	r0, r3
 800122e:	4603      	mov	r3, r0
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4403      	add	r3, r0
 8001234:	409a      	lsls	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	430a      	orrs	r2, r1
 800123c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b06      	cmp	r3, #6
 8001244:	d824      	bhi.n	8001290 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	3b05      	subs	r3, #5
 8001258:	221f      	movs	r2, #31
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43da      	mvns	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	400a      	ands	r2, r1
 8001266:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	b29b      	uxth	r3, r3
 8001274:	4618      	mov	r0, r3
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	4613      	mov	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	3b05      	subs	r3, #5
 8001282:	fa00 f203 	lsl.w	r2, r0, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	430a      	orrs	r2, r1
 800128c:	635a      	str	r2, [r3, #52]	; 0x34
 800128e:	e04c      	b.n	800132a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b0c      	cmp	r3, #12
 8001296:	d824      	bhi.n	80012e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	4613      	mov	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	3b23      	subs	r3, #35	; 0x23
 80012aa:	221f      	movs	r2, #31
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43da      	mvns	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	400a      	ands	r2, r1
 80012b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	3b23      	subs	r3, #35	; 0x23
 80012d4:	fa00 f203 	lsl.w	r2, r0, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	430a      	orrs	r2, r1
 80012de:	631a      	str	r2, [r3, #48]	; 0x30
 80012e0:	e023      	b.n	800132a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	3b41      	subs	r3, #65	; 0x41
 80012f4:	221f      	movs	r2, #31
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43da      	mvns	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	400a      	ands	r2, r1
 8001302:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	b29b      	uxth	r3, r3
 8001310:	4618      	mov	r0, r3
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	4613      	mov	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	3b41      	subs	r3, #65	; 0x41
 800131e:	fa00 f203 	lsl.w	r2, r0, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	430a      	orrs	r2, r1
 8001328:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800132a:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <HAL_ADC_ConfigChannel+0x250>)
 800132c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a28      	ldr	r2, [pc, #160]	; (80013d4 <HAL_ADC_ConfigChannel+0x254>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d10f      	bne.n	8001358 <HAL_ADC_ConfigChannel+0x1d8>
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b12      	cmp	r3, #18
 800133e:	d10b      	bne.n	8001358 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a1d      	ldr	r2, [pc, #116]	; (80013d4 <HAL_ADC_ConfigChannel+0x254>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d12b      	bne.n	80013ba <HAL_ADC_ConfigChannel+0x23a>
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a1c      	ldr	r2, [pc, #112]	; (80013d8 <HAL_ADC_ConfigChannel+0x258>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d003      	beq.n	8001374 <HAL_ADC_ConfigChannel+0x1f4>
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b11      	cmp	r3, #17
 8001372:	d122      	bne.n	80013ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a11      	ldr	r2, [pc, #68]	; (80013d8 <HAL_ADC_ConfigChannel+0x258>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d111      	bne.n	80013ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_ADC_ConfigChannel+0x25c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a11      	ldr	r2, [pc, #68]	; (80013e0 <HAL_ADC_ConfigChannel+0x260>)
 800139c:	fba2 2303 	umull	r2, r3, r2, r3
 80013a0:	0c9a      	lsrs	r2, r3, #18
 80013a2:	4613      	mov	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013ac:	e002      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f9      	bne.n	80013ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	40012300 	.word	0x40012300
 80013d4:	40012000 	.word	0x40012000
 80013d8:	10000012 	.word	0x10000012
 80013dc:	20000000 	.word	0x20000000
 80013e0:	431bde83 	.word	0x431bde83

080013e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013ec:	4b79      	ldr	r3, [pc, #484]	; (80015d4 <ADC_Init+0x1f0>)
 80013ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	431a      	orrs	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001418:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6859      	ldr	r1, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	021a      	lsls	r2, r3, #8
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800143c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6859      	ldr	r1, [r3, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800145e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6899      	ldr	r1, [r3, #8]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	68da      	ldr	r2, [r3, #12]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	430a      	orrs	r2, r1
 8001470:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001476:	4a58      	ldr	r2, [pc, #352]	; (80015d8 <ADC_Init+0x1f4>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d022      	beq.n	80014c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800148a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6899      	ldr	r1, [r3, #8]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6899      	ldr	r1, [r3, #8]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	e00f      	b.n	80014e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 0202 	bic.w	r2, r2, #2
 80014f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6899      	ldr	r1, [r3, #8]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7e1b      	ldrb	r3, [r3, #24]
 80014fc:	005a      	lsls	r2, r3, #1
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3020 	ldrb.w	r3, [r3, #32]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d01b      	beq.n	8001548 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800151e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800152e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6859      	ldr	r1, [r3, #4]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	3b01      	subs	r3, #1
 800153c:	035a      	lsls	r2, r3, #13
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	430a      	orrs	r2, r1
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	e007      	b.n	8001558 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001556:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001566:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	3b01      	subs	r3, #1
 8001574:	051a      	lsls	r2, r3, #20
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800158c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6899      	ldr	r1, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800159a:	025a      	lsls	r2, r3, #9
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6899      	ldr	r1, [r3, #8]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	029a      	lsls	r2, r3, #10
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	609a      	str	r2, [r3, #8]
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	40012300 	.word	0x40012300
 80015d8:	0f000001 	.word	0x0f000001

080015dc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800160c:	4013      	ands	r3, r2
 800160e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800161c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001622:	4a04      	ldr	r2, [pc, #16]	; (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	60d3      	str	r3, [r2, #12]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <__NVIC_GetPriorityGrouping+0x18>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	f003 0307 	and.w	r3, r3, #7
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	2b00      	cmp	r3, #0
 8001664:	db0b      	blt.n	800167e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	f003 021f 	and.w	r2, r3, #31
 800166c:	4907      	ldr	r1, [pc, #28]	; (800168c <__NVIC_EnableIRQ+0x38>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	2001      	movs	r0, #1
 8001676:	fa00 f202 	lsl.w	r2, r0, r2
 800167a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000e100 	.word	0xe000e100

08001690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	db0a      	blt.n	80016ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	490c      	ldr	r1, [pc, #48]	; (80016dc <__NVIC_SetPriority+0x4c>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	440b      	add	r3, r1
 80016b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b8:	e00a      	b.n	80016d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4908      	ldr	r1, [pc, #32]	; (80016e0 <__NVIC_SetPriority+0x50>)
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	3b04      	subs	r3, #4
 80016c8:	0112      	lsls	r2, r2, #4
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	440b      	add	r3, r1
 80016ce:	761a      	strb	r2, [r3, #24]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000e100 	.word	0xe000e100
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f1c3 0307 	rsb	r3, r3, #7
 80016fe:	2b04      	cmp	r3, #4
 8001700:	bf28      	it	cs
 8001702:	2304      	movcs	r3, #4
 8001704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3304      	adds	r3, #4
 800170a:	2b06      	cmp	r3, #6
 800170c:	d902      	bls.n	8001714 <NVIC_EncodePriority+0x30>
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3b03      	subs	r3, #3
 8001712:	e000      	b.n	8001716 <NVIC_EncodePriority+0x32>
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	f04f 32ff 	mov.w	r2, #4294967295
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43da      	mvns	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	401a      	ands	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800172c:	f04f 31ff 	mov.w	r1, #4294967295
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43d9      	mvns	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	4313      	orrs	r3, r2
         );
}
 800173e:	4618      	mov	r0, r3
 8001740:	3724      	adds	r7, #36	; 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800175c:	d301      	bcc.n	8001762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800175e:	2301      	movs	r3, #1
 8001760:	e00f      	b.n	8001782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <SysTick_Config+0x40>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176a:	210f      	movs	r1, #15
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	f7ff ff8e 	bl	8001690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <SysTick_Config+0x40>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <SysTick_Config+0x40>)
 800177c:	2207      	movs	r2, #7
 800177e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	e000e010 	.word	0xe000e010

08001790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff29 	bl	80015f0 <__NVIC_SetPriorityGrouping>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4603      	mov	r3, r0
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017b8:	f7ff ff3e 	bl	8001638 <__NVIC_GetPriorityGrouping>
 80017bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	6978      	ldr	r0, [r7, #20]
 80017c4:	f7ff ff8e 	bl	80016e4 <NVIC_EncodePriority>
 80017c8:	4602      	mov	r2, r0
 80017ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff5d 	bl	8001690 <__NVIC_SetPriority>
}
 80017d6:	bf00      	nop
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff31 	bl	8001654 <__NVIC_EnableIRQ>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ffa2 	bl	800174c <SysTick_Config>
 8001808:	4603      	mov	r3, r0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001814:	b480      	push	{r7}
 8001816:	b089      	sub	sp, #36	; 0x24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
 800182e:	e159      	b.n	8001ae4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001830:	2201      	movs	r2, #1
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	4013      	ands	r3, r2
 8001842:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	429a      	cmp	r2, r3
 800184a:	f040 8148 	bne.w	8001ade <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	2b01      	cmp	r3, #1
 8001858:	d005      	beq.n	8001866 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001862:	2b02      	cmp	r3, #2
 8001864:	d130      	bne.n	80018c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	2203      	movs	r2, #3
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4013      	ands	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800189c:	2201      	movs	r2, #1
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	091b      	lsrs	r3, r3, #4
 80018b2:	f003 0201 	and.w	r2, r3, #1
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b03      	cmp	r3, #3
 80018d2:	d017      	beq.n	8001904 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	2203      	movs	r2, #3
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d123      	bne.n	8001958 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	08da      	lsrs	r2, r3, #3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3208      	adds	r2, #8
 8001918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800191c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	220f      	movs	r2, #15
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	691a      	ldr	r2, [r3, #16]
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	08da      	lsrs	r2, r3, #3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3208      	adds	r2, #8
 8001952:	69b9      	ldr	r1, [r7, #24]
 8001954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	2203      	movs	r2, #3
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0203 	and.w	r2, r3, #3
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 80a2 	beq.w	8001ade <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	4b57      	ldr	r3, [pc, #348]	; (8001afc <HAL_GPIO_Init+0x2e8>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	4a56      	ldr	r2, [pc, #344]	; (8001afc <HAL_GPIO_Init+0x2e8>)
 80019a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a8:	6453      	str	r3, [r2, #68]	; 0x44
 80019aa:	4b54      	ldr	r3, [pc, #336]	; (8001afc <HAL_GPIO_Init+0x2e8>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019b6:	4a52      	ldr	r2, [pc, #328]	; (8001b00 <HAL_GPIO_Init+0x2ec>)
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	089b      	lsrs	r3, r3, #2
 80019bc:	3302      	adds	r3, #2
 80019be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	220f      	movs	r2, #15
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a49      	ldr	r2, [pc, #292]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d019      	beq.n	8001a16 <HAL_GPIO_Init+0x202>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a48      	ldr	r2, [pc, #288]	; (8001b08 <HAL_GPIO_Init+0x2f4>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d013      	beq.n	8001a12 <HAL_GPIO_Init+0x1fe>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a47      	ldr	r2, [pc, #284]	; (8001b0c <HAL_GPIO_Init+0x2f8>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d00d      	beq.n	8001a0e <HAL_GPIO_Init+0x1fa>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a46      	ldr	r2, [pc, #280]	; (8001b10 <HAL_GPIO_Init+0x2fc>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d007      	beq.n	8001a0a <HAL_GPIO_Init+0x1f6>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a45      	ldr	r2, [pc, #276]	; (8001b14 <HAL_GPIO_Init+0x300>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d101      	bne.n	8001a06 <HAL_GPIO_Init+0x1f2>
 8001a02:	2304      	movs	r3, #4
 8001a04:	e008      	b.n	8001a18 <HAL_GPIO_Init+0x204>
 8001a06:	2307      	movs	r3, #7
 8001a08:	e006      	b.n	8001a18 <HAL_GPIO_Init+0x204>
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e004      	b.n	8001a18 <HAL_GPIO_Init+0x204>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	e002      	b.n	8001a18 <HAL_GPIO_Init+0x204>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <HAL_GPIO_Init+0x204>
 8001a16:	2300      	movs	r3, #0
 8001a18:	69fa      	ldr	r2, [r7, #28]
 8001a1a:	f002 0203 	and.w	r2, r2, #3
 8001a1e:	0092      	lsls	r2, r2, #2
 8001a20:	4093      	lsls	r3, r2
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a28:	4935      	ldr	r1, [pc, #212]	; (8001b00 <HAL_GPIO_Init+0x2ec>)
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	089b      	lsrs	r3, r3, #2
 8001a2e:	3302      	adds	r3, #2
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a36:	4b38      	ldr	r3, [pc, #224]	; (8001b18 <HAL_GPIO_Init+0x304>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a5a:	4a2f      	ldr	r2, [pc, #188]	; (8001b18 <HAL_GPIO_Init+0x304>)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a60:	4b2d      	ldr	r3, [pc, #180]	; (8001b18 <HAL_GPIO_Init+0x304>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a84:	4a24      	ldr	r2, [pc, #144]	; (8001b18 <HAL_GPIO_Init+0x304>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a8a:	4b23      	ldr	r3, [pc, #140]	; (8001b18 <HAL_GPIO_Init+0x304>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4013      	ands	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aae:	4a1a      	ldr	r2, [pc, #104]	; (8001b18 <HAL_GPIO_Init+0x304>)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ab4:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <HAL_GPIO_Init+0x304>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ad8:	4a0f      	ldr	r2, [pc, #60]	; (8001b18 <HAL_GPIO_Init+0x304>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	61fb      	str	r3, [r7, #28]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	2b0f      	cmp	r3, #15
 8001ae8:	f67f aea2 	bls.w	8001830 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	3724      	adds	r7, #36	; 0x24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40013800 	.word	0x40013800
 8001b04:	40020000 	.word	0x40020000
 8001b08:	40020400 	.word	0x40020400
 8001b0c:	40020800 	.word	0x40020800
 8001b10:	40020c00 	.word	0x40020c00
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40013c00 	.word	0x40013c00

08001b1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e267      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d075      	beq.n	8001c26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b3a:	4b88      	ldr	r3, [pc, #544]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	d00c      	beq.n	8001b60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b46:	4b85      	ldr	r3, [pc, #532]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b4e:	2b08      	cmp	r3, #8
 8001b50:	d112      	bne.n	8001b78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b52:	4b82      	ldr	r3, [pc, #520]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b5e:	d10b      	bne.n	8001b78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b60:	4b7e      	ldr	r3, [pc, #504]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d05b      	beq.n	8001c24 <HAL_RCC_OscConfig+0x108>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d157      	bne.n	8001c24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e242      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b80:	d106      	bne.n	8001b90 <HAL_RCC_OscConfig+0x74>
 8001b82:	4b76      	ldr	r3, [pc, #472]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a75      	ldr	r2, [pc, #468]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e01d      	b.n	8001bcc <HAL_RCC_OscConfig+0xb0>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b98:	d10c      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x98>
 8001b9a:	4b70      	ldr	r3, [pc, #448]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a6f      	ldr	r2, [pc, #444]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	4b6d      	ldr	r3, [pc, #436]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a6c      	ldr	r2, [pc, #432]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	e00b      	b.n	8001bcc <HAL_RCC_OscConfig+0xb0>
 8001bb4:	4b69      	ldr	r3, [pc, #420]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a68      	ldr	r2, [pc, #416]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	4b66      	ldr	r3, [pc, #408]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a65      	ldr	r2, [pc, #404]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d013      	beq.n	8001bfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd4:	f7ff f894 	bl	8000d00 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bdc:	f7ff f890 	bl	8000d00 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b64      	cmp	r3, #100	; 0x64
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e207      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bee:	4b5b      	ldr	r3, [pc, #364]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0xc0>
 8001bfa:	e014      	b.n	8001c26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff f880 	bl	8000d00 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c04:	f7ff f87c 	bl	8000d00 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	; 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e1f3      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c16:	4b51      	ldr	r3, [pc, #324]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0xe8>
 8001c22:	e000      	b.n	8001c26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d063      	beq.n	8001cfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c32:	4b4a      	ldr	r3, [pc, #296]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00b      	beq.n	8001c56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c3e:	4b47      	ldr	r3, [pc, #284]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d11c      	bne.n	8001c84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c4a:	4b44      	ldr	r3, [pc, #272]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d116      	bne.n	8001c84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c56:	4b41      	ldr	r3, [pc, #260]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d005      	beq.n	8001c6e <HAL_RCC_OscConfig+0x152>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d001      	beq.n	8001c6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e1c7      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6e:	4b3b      	ldr	r3, [pc, #236]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	4937      	ldr	r1, [pc, #220]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c82:	e03a      	b.n	8001cfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d020      	beq.n	8001cce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c8c:	4b34      	ldr	r3, [pc, #208]	; (8001d60 <HAL_RCC_OscConfig+0x244>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c92:	f7ff f835 	bl	8000d00 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c9a:	f7ff f831 	bl	8000d00 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e1a8      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cac:	4b2b      	ldr	r3, [pc, #172]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f0      	beq.n	8001c9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb8:	4b28      	ldr	r3, [pc, #160]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4925      	ldr	r1, [pc, #148]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	600b      	str	r3, [r1, #0]
 8001ccc:	e015      	b.n	8001cfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cce:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <HAL_RCC_OscConfig+0x244>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd4:	f7ff f814 	bl	8000d00 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cdc:	f7ff f810 	bl	8000d00 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e187      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cee:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d036      	beq.n	8001d74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d016      	beq.n	8001d3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <HAL_RCC_OscConfig+0x248>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d14:	f7fe fff4 	bl	8000d00 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d1c:	f7fe fff0 	bl	8000d00 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e167      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0x200>
 8001d3a:	e01b      	b.n	8001d74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_RCC_OscConfig+0x248>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d42:	f7fe ffdd 	bl	8000d00 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d48:	e00e      	b.n	8001d68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d4a:	f7fe ffd9 	bl	8000d00 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d907      	bls.n	8001d68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e150      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	42470000 	.word	0x42470000
 8001d64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d68:	4b88      	ldr	r3, [pc, #544]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1ea      	bne.n	8001d4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 8097 	beq.w	8001eb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d86:	4b81      	ldr	r3, [pc, #516]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10f      	bne.n	8001db2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	4b7d      	ldr	r3, [pc, #500]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	4a7c      	ldr	r2, [pc, #496]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da0:	6413      	str	r3, [r2, #64]	; 0x40
 8001da2:	4b7a      	ldr	r3, [pc, #488]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dae:	2301      	movs	r3, #1
 8001db0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db2:	4b77      	ldr	r3, [pc, #476]	; (8001f90 <HAL_RCC_OscConfig+0x474>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d118      	bne.n	8001df0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dbe:	4b74      	ldr	r3, [pc, #464]	; (8001f90 <HAL_RCC_OscConfig+0x474>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a73      	ldr	r2, [pc, #460]	; (8001f90 <HAL_RCC_OscConfig+0x474>)
 8001dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dca:	f7fe ff99 	bl	8000d00 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd2:	f7fe ff95 	bl	8000d00 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e10c      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de4:	4b6a      	ldr	r3, [pc, #424]	; (8001f90 <HAL_RCC_OscConfig+0x474>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d106      	bne.n	8001e06 <HAL_RCC_OscConfig+0x2ea>
 8001df8:	4b64      	ldr	r3, [pc, #400]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfc:	4a63      	ldr	r2, [pc, #396]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6713      	str	r3, [r2, #112]	; 0x70
 8001e04:	e01c      	b.n	8001e40 <HAL_RCC_OscConfig+0x324>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b05      	cmp	r3, #5
 8001e0c:	d10c      	bne.n	8001e28 <HAL_RCC_OscConfig+0x30c>
 8001e0e:	4b5f      	ldr	r3, [pc, #380]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e12:	4a5e      	ldr	r2, [pc, #376]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001e14:	f043 0304 	orr.w	r3, r3, #4
 8001e18:	6713      	str	r3, [r2, #112]	; 0x70
 8001e1a:	4b5c      	ldr	r3, [pc, #368]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1e:	4a5b      	ldr	r2, [pc, #364]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6713      	str	r3, [r2, #112]	; 0x70
 8001e26:	e00b      	b.n	8001e40 <HAL_RCC_OscConfig+0x324>
 8001e28:	4b58      	ldr	r3, [pc, #352]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2c:	4a57      	ldr	r2, [pc, #348]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001e2e:	f023 0301 	bic.w	r3, r3, #1
 8001e32:	6713      	str	r3, [r2, #112]	; 0x70
 8001e34:	4b55      	ldr	r3, [pc, #340]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e38:	4a54      	ldr	r2, [pc, #336]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001e3a:	f023 0304 	bic.w	r3, r3, #4
 8001e3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d015      	beq.n	8001e74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e48:	f7fe ff5a 	bl	8000d00 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4e:	e00a      	b.n	8001e66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e50:	f7fe ff56 	bl	8000d00 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e0cb      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e66:	4b49      	ldr	r3, [pc, #292]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0ee      	beq.n	8001e50 <HAL_RCC_OscConfig+0x334>
 8001e72:	e014      	b.n	8001e9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e74:	f7fe ff44 	bl	8000d00 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e7a:	e00a      	b.n	8001e92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e7c:	f7fe ff40 	bl	8000d00 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e0b5      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e92:	4b3e      	ldr	r3, [pc, #248]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1ee      	bne.n	8001e7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d105      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea4:	4b39      	ldr	r3, [pc, #228]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	4a38      	ldr	r2, [pc, #224]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001eaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 80a1 	beq.w	8001ffc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eba:	4b34      	ldr	r3, [pc, #208]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b08      	cmp	r3, #8
 8001ec4:	d05c      	beq.n	8001f80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d141      	bne.n	8001f52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ece:	4b31      	ldr	r3, [pc, #196]	; (8001f94 <HAL_RCC_OscConfig+0x478>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7fe ff14 	bl	8000d00 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001edc:	f7fe ff10 	bl	8000d00 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e087      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eee:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69da      	ldr	r2, [r3, #28]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	019b      	lsls	r3, r3, #6
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f10:	085b      	lsrs	r3, r3, #1
 8001f12:	3b01      	subs	r3, #1
 8001f14:	041b      	lsls	r3, r3, #16
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	061b      	lsls	r3, r3, #24
 8001f1e:	491b      	ldr	r1, [pc, #108]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f24:	4b1b      	ldr	r3, [pc, #108]	; (8001f94 <HAL_RCC_OscConfig+0x478>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2a:	f7fe fee9 	bl	8000d00 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f32:	f7fe fee5 	bl	8000d00 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e05c      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0f0      	beq.n	8001f32 <HAL_RCC_OscConfig+0x416>
 8001f50:	e054      	b.n	8001ffc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <HAL_RCC_OscConfig+0x478>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7fe fed2 	bl	8000d00 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f60:	f7fe fece 	bl	8000d00 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e045      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x444>
 8001f7e:	e03d      	b.n	8001ffc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e038      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40007000 	.word	0x40007000
 8001f94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f98:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <HAL_RCC_OscConfig+0x4ec>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d028      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d121      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d11a      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fc8:	4013      	ands	r3, r2
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d111      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fde:	085b      	lsrs	r3, r3, #1
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d107      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800

0800200c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0cc      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002020:	4b68      	ldr	r3, [pc, #416]	; (80021c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d90c      	bls.n	8002048 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202e:	4b65      	ldr	r3, [pc, #404]	; (80021c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	4b63      	ldr	r3, [pc, #396]	; (80021c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0b8      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d020      	beq.n	8002096 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002060:	4b59      	ldr	r3, [pc, #356]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4a58      	ldr	r2, [pc, #352]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800206a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002078:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	4a52      	ldr	r2, [pc, #328]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002082:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002084:	4b50      	ldr	r3, [pc, #320]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	494d      	ldr	r1, [pc, #308]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002092:	4313      	orrs	r3, r2
 8002094:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d044      	beq.n	800212c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d107      	bne.n	80020ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d119      	bne.n	80020ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e07f      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d003      	beq.n	80020ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d107      	bne.n	80020da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ca:	4b3f      	ldr	r3, [pc, #252]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d109      	bne.n	80020ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e06f      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020da:	4b3b      	ldr	r3, [pc, #236]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e067      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ea:	4b37      	ldr	r3, [pc, #220]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f023 0203 	bic.w	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	4934      	ldr	r1, [pc, #208]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020fc:	f7fe fe00 	bl	8000d00 <HAL_GetTick>
 8002100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002102:	e00a      	b.n	800211a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002104:	f7fe fdfc 	bl	8000d00 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002112:	4293      	cmp	r3, r2
 8002114:	d901      	bls.n	800211a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e04f      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211a:	4b2b      	ldr	r3, [pc, #172]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 020c 	and.w	r2, r3, #12
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	429a      	cmp	r2, r3
 800212a:	d1eb      	bne.n	8002104 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800212c:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <HAL_RCC_ClockConfig+0x1b8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d20c      	bcs.n	8002154 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213a:	4b22      	ldr	r3, [pc, #136]	; (80021c4 <HAL_RCC_ClockConfig+0x1b8>)
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b20      	ldr	r3, [pc, #128]	; (80021c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e032      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002160:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4916      	ldr	r1, [pc, #88]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	4313      	orrs	r3, r2
 8002170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d009      	beq.n	8002192 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800217e:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	490e      	ldr	r1, [pc, #56]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	4313      	orrs	r3, r2
 8002190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002192:	f000 f821 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 8002196:	4602      	mov	r2, r0
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	490a      	ldr	r1, [pc, #40]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 80021a4:	5ccb      	ldrb	r3, [r1, r3]
 80021a6:	fa22 f303 	lsr.w	r3, r2, r3
 80021aa:	4a09      	ldr	r2, [pc, #36]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_RCC_ClockConfig+0x1c8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe fd60 	bl	8000c78 <HAL_InitTick>

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40023c00 	.word	0x40023c00
 80021c8:	40023800 	.word	0x40023800
 80021cc:	08004308 	.word	0x08004308
 80021d0:	20000000 	.word	0x20000000
 80021d4:	20000004 	.word	0x20000004

080021d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021dc:	b090      	sub	sp, #64	; 0x40
 80021de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	637b      	str	r3, [r7, #52]	; 0x34
 80021e4:	2300      	movs	r3, #0
 80021e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021e8:	2300      	movs	r3, #0
 80021ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021f0:	4b59      	ldr	r3, [pc, #356]	; (8002358 <HAL_RCC_GetSysClockFreq+0x180>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d00d      	beq.n	8002218 <HAL_RCC_GetSysClockFreq+0x40>
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	f200 80a1 	bhi.w	8002344 <HAL_RCC_GetSysClockFreq+0x16c>
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <HAL_RCC_GetSysClockFreq+0x34>
 8002206:	2b04      	cmp	r3, #4
 8002208:	d003      	beq.n	8002212 <HAL_RCC_GetSysClockFreq+0x3a>
 800220a:	e09b      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800220c:	4b53      	ldr	r3, [pc, #332]	; (800235c <HAL_RCC_GetSysClockFreq+0x184>)
 800220e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002210:	e09b      	b.n	800234a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002212:	4b53      	ldr	r3, [pc, #332]	; (8002360 <HAL_RCC_GetSysClockFreq+0x188>)
 8002214:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002216:	e098      	b.n	800234a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002218:	4b4f      	ldr	r3, [pc, #316]	; (8002358 <HAL_RCC_GetSysClockFreq+0x180>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002220:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002222:	4b4d      	ldr	r3, [pc, #308]	; (8002358 <HAL_RCC_GetSysClockFreq+0x180>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d028      	beq.n	8002280 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800222e:	4b4a      	ldr	r3, [pc, #296]	; (8002358 <HAL_RCC_GetSysClockFreq+0x180>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	099b      	lsrs	r3, r3, #6
 8002234:	2200      	movs	r2, #0
 8002236:	623b      	str	r3, [r7, #32]
 8002238:	627a      	str	r2, [r7, #36]	; 0x24
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002240:	2100      	movs	r1, #0
 8002242:	4b47      	ldr	r3, [pc, #284]	; (8002360 <HAL_RCC_GetSysClockFreq+0x188>)
 8002244:	fb03 f201 	mul.w	r2, r3, r1
 8002248:	2300      	movs	r3, #0
 800224a:	fb00 f303 	mul.w	r3, r0, r3
 800224e:	4413      	add	r3, r2
 8002250:	4a43      	ldr	r2, [pc, #268]	; (8002360 <HAL_RCC_GetSysClockFreq+0x188>)
 8002252:	fba0 1202 	umull	r1, r2, r0, r2
 8002256:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002258:	460a      	mov	r2, r1
 800225a:	62ba      	str	r2, [r7, #40]	; 0x28
 800225c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800225e:	4413      	add	r3, r2
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002264:	2200      	movs	r2, #0
 8002266:	61bb      	str	r3, [r7, #24]
 8002268:	61fa      	str	r2, [r7, #28]
 800226a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800226e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002272:	f7fe f811 	bl	8000298 <__aeabi_uldivmod>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	4613      	mov	r3, r2
 800227c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800227e:	e053      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002280:	4b35      	ldr	r3, [pc, #212]	; (8002358 <HAL_RCC_GetSysClockFreq+0x180>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	099b      	lsrs	r3, r3, #6
 8002286:	2200      	movs	r2, #0
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	617a      	str	r2, [r7, #20]
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002292:	f04f 0b00 	mov.w	fp, #0
 8002296:	4652      	mov	r2, sl
 8002298:	465b      	mov	r3, fp
 800229a:	f04f 0000 	mov.w	r0, #0
 800229e:	f04f 0100 	mov.w	r1, #0
 80022a2:	0159      	lsls	r1, r3, #5
 80022a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022a8:	0150      	lsls	r0, r2, #5
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	ebb2 080a 	subs.w	r8, r2, sl
 80022b2:	eb63 090b 	sbc.w	r9, r3, fp
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022ca:	ebb2 0408 	subs.w	r4, r2, r8
 80022ce:	eb63 0509 	sbc.w	r5, r3, r9
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	00eb      	lsls	r3, r5, #3
 80022dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022e0:	00e2      	lsls	r2, r4, #3
 80022e2:	4614      	mov	r4, r2
 80022e4:	461d      	mov	r5, r3
 80022e6:	eb14 030a 	adds.w	r3, r4, sl
 80022ea:	603b      	str	r3, [r7, #0]
 80022ec:	eb45 030b 	adc.w	r3, r5, fp
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022fe:	4629      	mov	r1, r5
 8002300:	028b      	lsls	r3, r1, #10
 8002302:	4621      	mov	r1, r4
 8002304:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002308:	4621      	mov	r1, r4
 800230a:	028a      	lsls	r2, r1, #10
 800230c:	4610      	mov	r0, r2
 800230e:	4619      	mov	r1, r3
 8002310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002312:	2200      	movs	r2, #0
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	60fa      	str	r2, [r7, #12]
 8002318:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800231c:	f7fd ffbc 	bl	8000298 <__aeabi_uldivmod>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4613      	mov	r3, r2
 8002326:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_RCC_GetSysClockFreq+0x180>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	0c1b      	lsrs	r3, r3, #16
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	3301      	adds	r3, #1
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002338:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800233a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002340:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002342:	e002      	b.n	800234a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <HAL_RCC_GetSysClockFreq+0x184>)
 8002346:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800234a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800234c:	4618      	mov	r0, r3
 800234e:	3740      	adds	r7, #64	; 0x40
 8002350:	46bd      	mov	sp, r7
 8002352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800
 800235c:	00f42400 	.word	0x00f42400
 8002360:	017d7840 	.word	0x017d7840

08002364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002368:	4b03      	ldr	r3, [pc, #12]	; (8002378 <HAL_RCC_GetHCLKFreq+0x14>)
 800236a:	681b      	ldr	r3, [r3, #0]
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	20000000 	.word	0x20000000

0800237c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002380:	f7ff fff0 	bl	8002364 <HAL_RCC_GetHCLKFreq>
 8002384:	4602      	mov	r2, r0
 8002386:	4b05      	ldr	r3, [pc, #20]	; (800239c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	0a9b      	lsrs	r3, r3, #10
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	4903      	ldr	r1, [pc, #12]	; (80023a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002392:	5ccb      	ldrb	r3, [r1, r3]
 8002394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002398:	4618      	mov	r0, r3
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40023800 	.word	0x40023800
 80023a0:	08004318 	.word	0x08004318

080023a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023a8:	f7ff ffdc 	bl	8002364 <HAL_RCC_GetHCLKFreq>
 80023ac:	4602      	mov	r2, r0
 80023ae:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	0b5b      	lsrs	r3, r3, #13
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	4903      	ldr	r1, [pc, #12]	; (80023c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ba:	5ccb      	ldrb	r3, [r1, r3]
 80023bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40023800 	.word	0x40023800
 80023c8:	08004318 	.word	0x08004318

080023cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d001      	beq.n	80023e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e044      	b.n	800246e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a1e      	ldr	r2, [pc, #120]	; (800247c <HAL_TIM_Base_Start_IT+0xb0>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d018      	beq.n	8002438 <HAL_TIM_Base_Start_IT+0x6c>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240e:	d013      	beq.n	8002438 <HAL_TIM_Base_Start_IT+0x6c>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a1a      	ldr	r2, [pc, #104]	; (8002480 <HAL_TIM_Base_Start_IT+0xb4>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00e      	beq.n	8002438 <HAL_TIM_Base_Start_IT+0x6c>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a19      	ldr	r2, [pc, #100]	; (8002484 <HAL_TIM_Base_Start_IT+0xb8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d009      	beq.n	8002438 <HAL_TIM_Base_Start_IT+0x6c>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a17      	ldr	r2, [pc, #92]	; (8002488 <HAL_TIM_Base_Start_IT+0xbc>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d004      	beq.n	8002438 <HAL_TIM_Base_Start_IT+0x6c>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a16      	ldr	r2, [pc, #88]	; (800248c <HAL_TIM_Base_Start_IT+0xc0>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d111      	bne.n	800245c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2b06      	cmp	r3, #6
 8002448:	d010      	beq.n	800246c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 0201 	orr.w	r2, r2, #1
 8002458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800245a:	e007      	b.n	800246c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40010000 	.word	0x40010000
 8002480:	40000400 	.word	0x40000400
 8002484:	40000800 	.word	0x40000800
 8002488:	40000c00 	.word	0x40000c00
 800248c:	40014000 	.word	0x40014000

08002490 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e041      	b.n	8002526 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d106      	bne.n	80024bc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7fe fad2 	bl	8000a60 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2202      	movs	r2, #2
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3304      	adds	r3, #4
 80024cc:	4619      	mov	r1, r3
 80024ce:	4610      	mov	r0, r2
 80024d0:	f000 f9ba 	bl	8002848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b02      	cmp	r3, #2
 8002542:	d122      	bne.n	800258a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b02      	cmp	r3, #2
 8002550:	d11b      	bne.n	800258a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f06f 0202 	mvn.w	r2, #2
 800255a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f94b 	bl	800280c <HAL_TIM_IC_CaptureCallback>
 8002576:	e005      	b.n	8002584 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f93d 	bl	80027f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f94e 	bl	8002820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b04      	cmp	r3, #4
 8002596:	d122      	bne.n	80025de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d11b      	bne.n	80025de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f06f 0204 	mvn.w	r2, #4
 80025ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2202      	movs	r2, #2
 80025b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f921 	bl	800280c <HAL_TIM_IC_CaptureCallback>
 80025ca:	e005      	b.n	80025d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f913 	bl	80027f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f924 	bl	8002820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d122      	bne.n	8002632 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d11b      	bne.n	8002632 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f06f 0208 	mvn.w	r2, #8
 8002602:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2204      	movs	r2, #4
 8002608:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f8f7 	bl	800280c <HAL_TIM_IC_CaptureCallback>
 800261e:	e005      	b.n	800262c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f8e9 	bl	80027f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f8fa 	bl	8002820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	2b10      	cmp	r3, #16
 800263e:	d122      	bne.n	8002686 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	2b10      	cmp	r3, #16
 800264c:	d11b      	bne.n	8002686 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f06f 0210 	mvn.w	r2, #16
 8002656:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2208      	movs	r2, #8
 800265c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f8cd 	bl	800280c <HAL_TIM_IC_CaptureCallback>
 8002672:	e005      	b.n	8002680 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f8bf 	bl	80027f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f8d0 	bl	8002820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b01      	cmp	r3, #1
 8002692:	d10e      	bne.n	80026b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d107      	bne.n	80026b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f06f 0201 	mvn.w	r2, #1
 80026aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7fe f907 	bl	80008c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026bc:	2b80      	cmp	r3, #128	; 0x80
 80026be:	d10e      	bne.n	80026de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ca:	2b80      	cmp	r3, #128	; 0x80
 80026cc:	d107      	bne.n	80026de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 facb 	bl	8002c74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e8:	2b40      	cmp	r3, #64	; 0x40
 80026ea:	d10e      	bne.n	800270a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f6:	2b40      	cmp	r3, #64	; 0x40
 80026f8:	d107      	bne.n	800270a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f895 	bl	8002834 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	f003 0320 	and.w	r3, r3, #32
 8002714:	2b20      	cmp	r3, #32
 8002716:	d10e      	bne.n	8002736 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	2b20      	cmp	r3, #32
 8002724:	d107      	bne.n	8002736 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f06f 0220 	mvn.w	r2, #32
 800272e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 fa95 	bl	8002c60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800274c:	2300      	movs	r3, #0
 800274e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_TIM_OC_ConfigChannel+0x1e>
 800275a:	2302      	movs	r3, #2
 800275c:	e048      	b.n	80027f0 <HAL_TIM_OC_ConfigChannel+0xb0>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b0c      	cmp	r3, #12
 800276a:	d839      	bhi.n	80027e0 <HAL_TIM_OC_ConfigChannel+0xa0>
 800276c:	a201      	add	r2, pc, #4	; (adr r2, 8002774 <HAL_TIM_OC_ConfigChannel+0x34>)
 800276e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002772:	bf00      	nop
 8002774:	080027a9 	.word	0x080027a9
 8002778:	080027e1 	.word	0x080027e1
 800277c:	080027e1 	.word	0x080027e1
 8002780:	080027e1 	.word	0x080027e1
 8002784:	080027b7 	.word	0x080027b7
 8002788:	080027e1 	.word	0x080027e1
 800278c:	080027e1 	.word	0x080027e1
 8002790:	080027e1 	.word	0x080027e1
 8002794:	080027c5 	.word	0x080027c5
 8002798:	080027e1 	.word	0x080027e1
 800279c:	080027e1 	.word	0x080027e1
 80027a0:	080027e1 	.word	0x080027e1
 80027a4:	080027d3 	.word	0x080027d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 f8ca 	bl	8002948 <TIM_OC1_SetConfig>
      break;
 80027b4:	e017      	b.n	80027e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68b9      	ldr	r1, [r7, #8]
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 f929 	bl	8002a14 <TIM_OC2_SetConfig>
      break;
 80027c2:	e010      	b.n	80027e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 f98e 	bl	8002aec <TIM_OC3_SetConfig>
      break;
 80027d0:	e009      	b.n	80027e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68b9      	ldr	r1, [r7, #8]
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 f9f1 	bl	8002bc0 <TIM_OC4_SetConfig>
      break;
 80027de:	e002      	b.n	80027e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	75fb      	strb	r3, [r7, #23]
      break;
 80027e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a34      	ldr	r2, [pc, #208]	; (800292c <TIM_Base_SetConfig+0xe4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d00f      	beq.n	8002880 <TIM_Base_SetConfig+0x38>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002866:	d00b      	beq.n	8002880 <TIM_Base_SetConfig+0x38>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a31      	ldr	r2, [pc, #196]	; (8002930 <TIM_Base_SetConfig+0xe8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d007      	beq.n	8002880 <TIM_Base_SetConfig+0x38>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a30      	ldr	r2, [pc, #192]	; (8002934 <TIM_Base_SetConfig+0xec>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d003      	beq.n	8002880 <TIM_Base_SetConfig+0x38>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a2f      	ldr	r2, [pc, #188]	; (8002938 <TIM_Base_SetConfig+0xf0>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d108      	bne.n	8002892 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4313      	orrs	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a25      	ldr	r2, [pc, #148]	; (800292c <TIM_Base_SetConfig+0xe4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d01b      	beq.n	80028d2 <TIM_Base_SetConfig+0x8a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a0:	d017      	beq.n	80028d2 <TIM_Base_SetConfig+0x8a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a22      	ldr	r2, [pc, #136]	; (8002930 <TIM_Base_SetConfig+0xe8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d013      	beq.n	80028d2 <TIM_Base_SetConfig+0x8a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a21      	ldr	r2, [pc, #132]	; (8002934 <TIM_Base_SetConfig+0xec>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00f      	beq.n	80028d2 <TIM_Base_SetConfig+0x8a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a20      	ldr	r2, [pc, #128]	; (8002938 <TIM_Base_SetConfig+0xf0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00b      	beq.n	80028d2 <TIM_Base_SetConfig+0x8a>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a1f      	ldr	r2, [pc, #124]	; (800293c <TIM_Base_SetConfig+0xf4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d007      	beq.n	80028d2 <TIM_Base_SetConfig+0x8a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a1e      	ldr	r2, [pc, #120]	; (8002940 <TIM_Base_SetConfig+0xf8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d003      	beq.n	80028d2 <TIM_Base_SetConfig+0x8a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a1d      	ldr	r2, [pc, #116]	; (8002944 <TIM_Base_SetConfig+0xfc>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d108      	bne.n	80028e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a08      	ldr	r2, [pc, #32]	; (800292c <TIM_Base_SetConfig+0xe4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d103      	bne.n	8002918 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	615a      	str	r2, [r3, #20]
}
 800291e:	bf00      	nop
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40010000 	.word	0x40010000
 8002930:	40000400 	.word	0x40000400
 8002934:	40000800 	.word	0x40000800
 8002938:	40000c00 	.word	0x40000c00
 800293c:	40014000 	.word	0x40014000
 8002940:	40014400 	.word	0x40014400
 8002944:	40014800 	.word	0x40014800

08002948 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002948:	b480      	push	{r7}
 800294a:	b087      	sub	sp, #28
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	f023 0201 	bic.w	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f023 0303 	bic.w	r3, r3, #3
 800297e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4313      	orrs	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f023 0302 	bic.w	r3, r3, #2
 8002990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	4313      	orrs	r3, r2
 800299a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a1c      	ldr	r2, [pc, #112]	; (8002a10 <TIM_OC1_SetConfig+0xc8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d10c      	bne.n	80029be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f023 0308 	bic.w	r3, r3, #8
 80029aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f023 0304 	bic.w	r3, r3, #4
 80029bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a13      	ldr	r2, [pc, #76]	; (8002a10 <TIM_OC1_SetConfig+0xc8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d111      	bne.n	80029ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	621a      	str	r2, [r3, #32]
}
 8002a04:	bf00      	nop
 8002a06:	371c      	adds	r7, #28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	40010000 	.word	0x40010000

08002a14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	f023 0210 	bic.w	r2, r3, #16
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	021b      	lsls	r3, r3, #8
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f023 0320 	bic.w	r3, r3, #32
 8002a5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a1e      	ldr	r2, [pc, #120]	; (8002ae8 <TIM_OC2_SetConfig+0xd4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d10d      	bne.n	8002a90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a15      	ldr	r2, [pc, #84]	; (8002ae8 <TIM_OC2_SetConfig+0xd4>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d113      	bne.n	8002ac0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	621a      	str	r2, [r3, #32]
}
 8002ada:	bf00      	nop
 8002adc:	371c      	adds	r7, #28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40010000 	.word	0x40010000

08002aec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f023 0303 	bic.w	r3, r3, #3
 8002b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a1d      	ldr	r2, [pc, #116]	; (8002bbc <TIM_OC3_SetConfig+0xd0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d10d      	bne.n	8002b66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	021b      	lsls	r3, r3, #8
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a14      	ldr	r2, [pc, #80]	; (8002bbc <TIM_OC3_SetConfig+0xd0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d113      	bne.n	8002b96 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	621a      	str	r2, [r3, #32]
}
 8002bb0:	bf00      	nop
 8002bb2:	371c      	adds	r7, #28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	40010000 	.word	0x40010000

08002bc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	021b      	lsls	r3, r3, #8
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	031b      	lsls	r3, r3, #12
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a10      	ldr	r2, [pc, #64]	; (8002c5c <TIM_OC4_SetConfig+0x9c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d109      	bne.n	8002c34 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	019b      	lsls	r3, r3, #6
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	621a      	str	r2, [r3, #32]
}
 8002c4e:	bf00      	nop
 8002c50:	371c      	adds	r7, #28
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40010000 	.word	0x40010000

08002c60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e03f      	b.n	8002d1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d106      	bne.n	8002cb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7fd fefe 	bl	8000ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2224      	movs	r2, #36	; 0x24
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f829 	bl	8002d24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ce0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695a      	ldr	r2, [r3, #20]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d28:	b0c0      	sub	sp, #256	; 0x100
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d40:	68d9      	ldr	r1, [r3, #12]
 8002d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	ea40 0301 	orr.w	r3, r0, r1
 8002d4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d7c:	f021 010c 	bic.w	r1, r1, #12
 8002d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d8a:	430b      	orrs	r3, r1
 8002d8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9e:	6999      	ldr	r1, [r3, #24]
 8002da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	ea40 0301 	orr.w	r3, r0, r1
 8002daa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	4b8f      	ldr	r3, [pc, #572]	; (8002ff0 <UART_SetConfig+0x2cc>)
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d005      	beq.n	8002dc4 <UART_SetConfig+0xa0>
 8002db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4b8d      	ldr	r3, [pc, #564]	; (8002ff4 <UART_SetConfig+0x2d0>)
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d104      	bne.n	8002dce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002dc4:	f7ff faee 	bl	80023a4 <HAL_RCC_GetPCLK2Freq>
 8002dc8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002dcc:	e003      	b.n	8002dd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002dce:	f7ff fad5 	bl	800237c <HAL_RCC_GetPCLK1Freq>
 8002dd2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002de0:	f040 810c 	bne.w	8002ffc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002de8:	2200      	movs	r2, #0
 8002dea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002dee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002df2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002df6:	4622      	mov	r2, r4
 8002df8:	462b      	mov	r3, r5
 8002dfa:	1891      	adds	r1, r2, r2
 8002dfc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002dfe:	415b      	adcs	r3, r3
 8002e00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e06:	4621      	mov	r1, r4
 8002e08:	eb12 0801 	adds.w	r8, r2, r1
 8002e0c:	4629      	mov	r1, r5
 8002e0e:	eb43 0901 	adc.w	r9, r3, r1
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e26:	4690      	mov	r8, r2
 8002e28:	4699      	mov	r9, r3
 8002e2a:	4623      	mov	r3, r4
 8002e2c:	eb18 0303 	adds.w	r3, r8, r3
 8002e30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e34:	462b      	mov	r3, r5
 8002e36:	eb49 0303 	adc.w	r3, r9, r3
 8002e3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e52:	460b      	mov	r3, r1
 8002e54:	18db      	adds	r3, r3, r3
 8002e56:	653b      	str	r3, [r7, #80]	; 0x50
 8002e58:	4613      	mov	r3, r2
 8002e5a:	eb42 0303 	adc.w	r3, r2, r3
 8002e5e:	657b      	str	r3, [r7, #84]	; 0x54
 8002e60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e68:	f7fd fa16 	bl	8000298 <__aeabi_uldivmod>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4b61      	ldr	r3, [pc, #388]	; (8002ff8 <UART_SetConfig+0x2d4>)
 8002e72:	fba3 2302 	umull	r2, r3, r3, r2
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	011c      	lsls	r4, r3, #4
 8002e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e84:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e8c:	4642      	mov	r2, r8
 8002e8e:	464b      	mov	r3, r9
 8002e90:	1891      	adds	r1, r2, r2
 8002e92:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e94:	415b      	adcs	r3, r3
 8002e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e9c:	4641      	mov	r1, r8
 8002e9e:	eb12 0a01 	adds.w	sl, r2, r1
 8002ea2:	4649      	mov	r1, r9
 8002ea4:	eb43 0b01 	adc.w	fp, r3, r1
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002eb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002eb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ebc:	4692      	mov	sl, r2
 8002ebe:	469b      	mov	fp, r3
 8002ec0:	4643      	mov	r3, r8
 8002ec2:	eb1a 0303 	adds.w	r3, sl, r3
 8002ec6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002eca:	464b      	mov	r3, r9
 8002ecc:	eb4b 0303 	adc.w	r3, fp, r3
 8002ed0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ee0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ee4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	18db      	adds	r3, r3, r3
 8002eec:	643b      	str	r3, [r7, #64]	; 0x40
 8002eee:	4613      	mov	r3, r2
 8002ef0:	eb42 0303 	adc.w	r3, r2, r3
 8002ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ef6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002efa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002efe:	f7fd f9cb 	bl	8000298 <__aeabi_uldivmod>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4611      	mov	r1, r2
 8002f08:	4b3b      	ldr	r3, [pc, #236]	; (8002ff8 <UART_SetConfig+0x2d4>)
 8002f0a:	fba3 2301 	umull	r2, r3, r3, r1
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	2264      	movs	r2, #100	; 0x64
 8002f12:	fb02 f303 	mul.w	r3, r2, r3
 8002f16:	1acb      	subs	r3, r1, r3
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f1e:	4b36      	ldr	r3, [pc, #216]	; (8002ff8 <UART_SetConfig+0x2d4>)
 8002f20:	fba3 2302 	umull	r2, r3, r3, r2
 8002f24:	095b      	lsrs	r3, r3, #5
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f2c:	441c      	add	r4, r3
 8002f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f32:	2200      	movs	r2, #0
 8002f34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f40:	4642      	mov	r2, r8
 8002f42:	464b      	mov	r3, r9
 8002f44:	1891      	adds	r1, r2, r2
 8002f46:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f48:	415b      	adcs	r3, r3
 8002f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f50:	4641      	mov	r1, r8
 8002f52:	1851      	adds	r1, r2, r1
 8002f54:	6339      	str	r1, [r7, #48]	; 0x30
 8002f56:	4649      	mov	r1, r9
 8002f58:	414b      	adcs	r3, r1
 8002f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f68:	4659      	mov	r1, fp
 8002f6a:	00cb      	lsls	r3, r1, #3
 8002f6c:	4651      	mov	r1, sl
 8002f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f72:	4651      	mov	r1, sl
 8002f74:	00ca      	lsls	r2, r1, #3
 8002f76:	4610      	mov	r0, r2
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4642      	mov	r2, r8
 8002f7e:	189b      	adds	r3, r3, r2
 8002f80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f84:	464b      	mov	r3, r9
 8002f86:	460a      	mov	r2, r1
 8002f88:	eb42 0303 	adc.w	r3, r2, r3
 8002f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002fa0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	18db      	adds	r3, r3, r3
 8002fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002faa:	4613      	mov	r3, r2
 8002fac:	eb42 0303 	adc.w	r3, r2, r3
 8002fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002fba:	f7fd f96d 	bl	8000298 <__aeabi_uldivmod>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <UART_SetConfig+0x2d4>)
 8002fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fc8:	095b      	lsrs	r3, r3, #5
 8002fca:	2164      	movs	r1, #100	; 0x64
 8002fcc:	fb01 f303 	mul.w	r3, r1, r3
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	3332      	adds	r3, #50	; 0x32
 8002fd6:	4a08      	ldr	r2, [pc, #32]	; (8002ff8 <UART_SetConfig+0x2d4>)
 8002fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fdc:	095b      	lsrs	r3, r3, #5
 8002fde:	f003 0207 	and.w	r2, r3, #7
 8002fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4422      	add	r2, r4
 8002fea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fec:	e105      	b.n	80031fa <UART_SetConfig+0x4d6>
 8002fee:	bf00      	nop
 8002ff0:	40011000 	.word	0x40011000
 8002ff4:	40011400 	.word	0x40011400
 8002ff8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003000:	2200      	movs	r2, #0
 8003002:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003006:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800300a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800300e:	4642      	mov	r2, r8
 8003010:	464b      	mov	r3, r9
 8003012:	1891      	adds	r1, r2, r2
 8003014:	6239      	str	r1, [r7, #32]
 8003016:	415b      	adcs	r3, r3
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
 800301a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800301e:	4641      	mov	r1, r8
 8003020:	1854      	adds	r4, r2, r1
 8003022:	4649      	mov	r1, r9
 8003024:	eb43 0501 	adc.w	r5, r3, r1
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	00eb      	lsls	r3, r5, #3
 8003032:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003036:	00e2      	lsls	r2, r4, #3
 8003038:	4614      	mov	r4, r2
 800303a:	461d      	mov	r5, r3
 800303c:	4643      	mov	r3, r8
 800303e:	18e3      	adds	r3, r4, r3
 8003040:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003044:	464b      	mov	r3, r9
 8003046:	eb45 0303 	adc.w	r3, r5, r3
 800304a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800304e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800305a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800306a:	4629      	mov	r1, r5
 800306c:	008b      	lsls	r3, r1, #2
 800306e:	4621      	mov	r1, r4
 8003070:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003074:	4621      	mov	r1, r4
 8003076:	008a      	lsls	r2, r1, #2
 8003078:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800307c:	f7fd f90c 	bl	8000298 <__aeabi_uldivmod>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4b60      	ldr	r3, [pc, #384]	; (8003208 <UART_SetConfig+0x4e4>)
 8003086:	fba3 2302 	umull	r2, r3, r3, r2
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	011c      	lsls	r4, r3, #4
 800308e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003092:	2200      	movs	r2, #0
 8003094:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003098:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800309c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80030a0:	4642      	mov	r2, r8
 80030a2:	464b      	mov	r3, r9
 80030a4:	1891      	adds	r1, r2, r2
 80030a6:	61b9      	str	r1, [r7, #24]
 80030a8:	415b      	adcs	r3, r3
 80030aa:	61fb      	str	r3, [r7, #28]
 80030ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030b0:	4641      	mov	r1, r8
 80030b2:	1851      	adds	r1, r2, r1
 80030b4:	6139      	str	r1, [r7, #16]
 80030b6:	4649      	mov	r1, r9
 80030b8:	414b      	adcs	r3, r1
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030c8:	4659      	mov	r1, fp
 80030ca:	00cb      	lsls	r3, r1, #3
 80030cc:	4651      	mov	r1, sl
 80030ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030d2:	4651      	mov	r1, sl
 80030d4:	00ca      	lsls	r2, r1, #3
 80030d6:	4610      	mov	r0, r2
 80030d8:	4619      	mov	r1, r3
 80030da:	4603      	mov	r3, r0
 80030dc:	4642      	mov	r2, r8
 80030de:	189b      	adds	r3, r3, r2
 80030e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030e4:	464b      	mov	r3, r9
 80030e6:	460a      	mov	r2, r1
 80030e8:	eb42 0303 	adc.w	r3, r2, r3
 80030ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80030fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003108:	4649      	mov	r1, r9
 800310a:	008b      	lsls	r3, r1, #2
 800310c:	4641      	mov	r1, r8
 800310e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003112:	4641      	mov	r1, r8
 8003114:	008a      	lsls	r2, r1, #2
 8003116:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800311a:	f7fd f8bd 	bl	8000298 <__aeabi_uldivmod>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4b39      	ldr	r3, [pc, #228]	; (8003208 <UART_SetConfig+0x4e4>)
 8003124:	fba3 1302 	umull	r1, r3, r3, r2
 8003128:	095b      	lsrs	r3, r3, #5
 800312a:	2164      	movs	r1, #100	; 0x64
 800312c:	fb01 f303 	mul.w	r3, r1, r3
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	3332      	adds	r3, #50	; 0x32
 8003136:	4a34      	ldr	r2, [pc, #208]	; (8003208 <UART_SetConfig+0x4e4>)
 8003138:	fba2 2303 	umull	r2, r3, r2, r3
 800313c:	095b      	lsrs	r3, r3, #5
 800313e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003142:	441c      	add	r4, r3
 8003144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003148:	2200      	movs	r2, #0
 800314a:	673b      	str	r3, [r7, #112]	; 0x70
 800314c:	677a      	str	r2, [r7, #116]	; 0x74
 800314e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003152:	4642      	mov	r2, r8
 8003154:	464b      	mov	r3, r9
 8003156:	1891      	adds	r1, r2, r2
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	415b      	adcs	r3, r3
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003162:	4641      	mov	r1, r8
 8003164:	1851      	adds	r1, r2, r1
 8003166:	6039      	str	r1, [r7, #0]
 8003168:	4649      	mov	r1, r9
 800316a:	414b      	adcs	r3, r1
 800316c:	607b      	str	r3, [r7, #4]
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800317a:	4659      	mov	r1, fp
 800317c:	00cb      	lsls	r3, r1, #3
 800317e:	4651      	mov	r1, sl
 8003180:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003184:	4651      	mov	r1, sl
 8003186:	00ca      	lsls	r2, r1, #3
 8003188:	4610      	mov	r0, r2
 800318a:	4619      	mov	r1, r3
 800318c:	4603      	mov	r3, r0
 800318e:	4642      	mov	r2, r8
 8003190:	189b      	adds	r3, r3, r2
 8003192:	66bb      	str	r3, [r7, #104]	; 0x68
 8003194:	464b      	mov	r3, r9
 8003196:	460a      	mov	r2, r1
 8003198:	eb42 0303 	adc.w	r3, r2, r3
 800319c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800319e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	663b      	str	r3, [r7, #96]	; 0x60
 80031a8:	667a      	str	r2, [r7, #100]	; 0x64
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80031b6:	4649      	mov	r1, r9
 80031b8:	008b      	lsls	r3, r1, #2
 80031ba:	4641      	mov	r1, r8
 80031bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031c0:	4641      	mov	r1, r8
 80031c2:	008a      	lsls	r2, r1, #2
 80031c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80031c8:	f7fd f866 	bl	8000298 <__aeabi_uldivmod>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <UART_SetConfig+0x4e4>)
 80031d2:	fba3 1302 	umull	r1, r3, r3, r2
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	2164      	movs	r1, #100	; 0x64
 80031da:	fb01 f303 	mul.w	r3, r1, r3
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	3332      	adds	r3, #50	; 0x32
 80031e4:	4a08      	ldr	r2, [pc, #32]	; (8003208 <UART_SetConfig+0x4e4>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	f003 020f 	and.w	r2, r3, #15
 80031f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4422      	add	r2, r4
 80031f8:	609a      	str	r2, [r3, #8]
}
 80031fa:	bf00      	nop
 80031fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003200:	46bd      	mov	sp, r7
 8003202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003206:	bf00      	nop
 8003208:	51eb851f 	.word	0x51eb851f

0800320c <arm_rfft_fast_init_f32>:
 800320c:	084b      	lsrs	r3, r1, #1
 800320e:	2b80      	cmp	r3, #128	; 0x80
 8003210:	b410      	push	{r4}
 8003212:	8201      	strh	r1, [r0, #16]
 8003214:	8003      	strh	r3, [r0, #0]
 8003216:	d046      	beq.n	80032a6 <arm_rfft_fast_init_f32+0x9a>
 8003218:	d916      	bls.n	8003248 <arm_rfft_fast_init_f32+0x3c>
 800321a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800321e:	d03c      	beq.n	800329a <arm_rfft_fast_init_f32+0x8e>
 8003220:	d928      	bls.n	8003274 <arm_rfft_fast_init_f32+0x68>
 8003222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003226:	d01f      	beq.n	8003268 <arm_rfft_fast_init_f32+0x5c>
 8003228:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800322c:	d112      	bne.n	8003254 <arm_rfft_fast_init_f32+0x48>
 800322e:	4920      	ldr	r1, [pc, #128]	; (80032b0 <arm_rfft_fast_init_f32+0xa4>)
 8003230:	4a20      	ldr	r2, [pc, #128]	; (80032b4 <arm_rfft_fast_init_f32+0xa8>)
 8003232:	4b21      	ldr	r3, [pc, #132]	; (80032b8 <arm_rfft_fast_init_f32+0xac>)
 8003234:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8003238:	8184      	strh	r4, [r0, #12]
 800323a:	6081      	str	r1, [r0, #8]
 800323c:	6042      	str	r2, [r0, #4]
 800323e:	6143      	str	r3, [r0, #20]
 8003240:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003244:	2000      	movs	r0, #0
 8003246:	4770      	bx	lr
 8003248:	2b20      	cmp	r3, #32
 800324a:	d01c      	beq.n	8003286 <arm_rfft_fast_init_f32+0x7a>
 800324c:	2b40      	cmp	r3, #64	; 0x40
 800324e:	d006      	beq.n	800325e <arm_rfft_fast_init_f32+0x52>
 8003250:	2b10      	cmp	r3, #16
 8003252:	d01d      	beq.n	8003290 <arm_rfft_fast_init_f32+0x84>
 8003254:	f04f 30ff 	mov.w	r0, #4294967295
 8003258:	f85d 4b04 	ldr.w	r4, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	2438      	movs	r4, #56	; 0x38
 8003260:	4916      	ldr	r1, [pc, #88]	; (80032bc <arm_rfft_fast_init_f32+0xb0>)
 8003262:	4a17      	ldr	r2, [pc, #92]	; (80032c0 <arm_rfft_fast_init_f32+0xb4>)
 8003264:	4b17      	ldr	r3, [pc, #92]	; (80032c4 <arm_rfft_fast_init_f32+0xb8>)
 8003266:	e7e7      	b.n	8003238 <arm_rfft_fast_init_f32+0x2c>
 8003268:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800326c:	4916      	ldr	r1, [pc, #88]	; (80032c8 <arm_rfft_fast_init_f32+0xbc>)
 800326e:	4a17      	ldr	r2, [pc, #92]	; (80032cc <arm_rfft_fast_init_f32+0xc0>)
 8003270:	4b17      	ldr	r3, [pc, #92]	; (80032d0 <arm_rfft_fast_init_f32+0xc4>)
 8003272:	e7e1      	b.n	8003238 <arm_rfft_fast_init_f32+0x2c>
 8003274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003278:	d1ec      	bne.n	8003254 <arm_rfft_fast_init_f32+0x48>
 800327a:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800327e:	4915      	ldr	r1, [pc, #84]	; (80032d4 <arm_rfft_fast_init_f32+0xc8>)
 8003280:	4a15      	ldr	r2, [pc, #84]	; (80032d8 <arm_rfft_fast_init_f32+0xcc>)
 8003282:	4b16      	ldr	r3, [pc, #88]	; (80032dc <arm_rfft_fast_init_f32+0xd0>)
 8003284:	e7d8      	b.n	8003238 <arm_rfft_fast_init_f32+0x2c>
 8003286:	2430      	movs	r4, #48	; 0x30
 8003288:	4915      	ldr	r1, [pc, #84]	; (80032e0 <arm_rfft_fast_init_f32+0xd4>)
 800328a:	4a16      	ldr	r2, [pc, #88]	; (80032e4 <arm_rfft_fast_init_f32+0xd8>)
 800328c:	4b16      	ldr	r3, [pc, #88]	; (80032e8 <arm_rfft_fast_init_f32+0xdc>)
 800328e:	e7d3      	b.n	8003238 <arm_rfft_fast_init_f32+0x2c>
 8003290:	2414      	movs	r4, #20
 8003292:	4916      	ldr	r1, [pc, #88]	; (80032ec <arm_rfft_fast_init_f32+0xe0>)
 8003294:	4a16      	ldr	r2, [pc, #88]	; (80032f0 <arm_rfft_fast_init_f32+0xe4>)
 8003296:	4b17      	ldr	r3, [pc, #92]	; (80032f4 <arm_rfft_fast_init_f32+0xe8>)
 8003298:	e7ce      	b.n	8003238 <arm_rfft_fast_init_f32+0x2c>
 800329a:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800329e:	4916      	ldr	r1, [pc, #88]	; (80032f8 <arm_rfft_fast_init_f32+0xec>)
 80032a0:	4a16      	ldr	r2, [pc, #88]	; (80032fc <arm_rfft_fast_init_f32+0xf0>)
 80032a2:	4b17      	ldr	r3, [pc, #92]	; (8003300 <arm_rfft_fast_init_f32+0xf4>)
 80032a4:	e7c8      	b.n	8003238 <arm_rfft_fast_init_f32+0x2c>
 80032a6:	24d0      	movs	r4, #208	; 0xd0
 80032a8:	4916      	ldr	r1, [pc, #88]	; (8003304 <arm_rfft_fast_init_f32+0xf8>)
 80032aa:	4a17      	ldr	r2, [pc, #92]	; (8003308 <arm_rfft_fast_init_f32+0xfc>)
 80032ac:	4b17      	ldr	r3, [pc, #92]	; (800330c <arm_rfft_fast_init_f32+0x100>)
 80032ae:	e7c3      	b.n	8003238 <arm_rfft_fast_init_f32+0x2c>
 80032b0:	08013128 	.word	0x08013128
 80032b4:	08004320 	.word	0x08004320
 80032b8:	0800a490 	.word	0x0800a490
 80032bc:	08008420 	.word	0x08008420
 80032c0:	08014ee8 	.word	0x08014ee8
 80032c4:	080173d8 	.word	0x080173d8
 80032c8:	08010e10 	.word	0x08010e10
 80032cc:	0800ed10 	.word	0x0800ed10
 80032d0:	08008490 	.word	0x08008490
 80032d4:	08017068 	.word	0x08017068
 80032d8:	0800e490 	.word	0x0800e490
 80032dc:	080150e8 	.word	0x080150e8
 80032e0:	08011cc8 	.word	0x08011cc8
 80032e4:	08010d10 	.word	0x08010d10
 80032e8:	08008320 	.word	0x08008320
 80032ec:	08011c20 	.word	0x08011c20
 80032f0:	0800ec90 	.word	0x0800ec90
 80032f4:	08011c48 	.word	0x08011c48
 80032f8:	080158e8 	.word	0x080158e8
 80032fc:	08012128 	.word	0x08012128
 8003300:	08015c68 	.word	0x08015c68
 8003304:	080175d8 	.word	0x080175d8
 8003308:	08011d28 	.word	0x08011d28
 800330c:	08016c68 	.word	0x08016c68

08003310 <arm_rfft_fast_f32>:
 8003310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003314:	8a06      	ldrh	r6, [r0, #16]
 8003316:	0876      	lsrs	r6, r6, #1
 8003318:	4607      	mov	r7, r0
 800331a:	4615      	mov	r5, r2
 800331c:	8006      	strh	r6, [r0, #0]
 800331e:	460c      	mov	r4, r1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d15c      	bne.n	80033de <arm_rfft_fast_f32+0xce>
 8003324:	461a      	mov	r2, r3
 8003326:	2301      	movs	r3, #1
 8003328:	f000 fbe4 	bl	8003af4 <arm_cfft_f32>
 800332c:	edd4 7a00 	vldr	s15, [r4]
 8003330:	ed94 7a01 	vldr	s14, [r4, #4]
 8003334:	883e      	ldrh	r6, [r7, #0]
 8003336:	6978      	ldr	r0, [r7, #20]
 8003338:	ee37 7a07 	vadd.f32	s14, s14, s14
 800333c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003340:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 8003344:	ee77 6a87 	vadd.f32	s13, s15, s14
 8003348:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800334c:	3e01      	subs	r6, #1
 800334e:	ee26 7a83 	vmul.f32	s14, s13, s6
 8003352:	ee67 7a83 	vmul.f32	s15, s15, s6
 8003356:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800335a:	ed85 7a00 	vstr	s14, [r5]
 800335e:	edc5 7a01 	vstr	s15, [r5, #4]
 8003362:	3010      	adds	r0, #16
 8003364:	f105 0210 	add.w	r2, r5, #16
 8003368:	3b08      	subs	r3, #8
 800336a:	f104 0110 	add.w	r1, r4, #16
 800336e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003372:	ed51 6a02 	vldr	s13, [r1, #-8]
 8003376:	ed10 6a02 	vldr	s12, [r0, #-8]
 800337a:	edd3 3a03 	vldr	s7, [r3, #12]
 800337e:	ed11 5a01 	vldr	s10, [r1, #-4]
 8003382:	ed50 5a01 	vldr	s11, [r0, #-4]
 8003386:	ee77 7a66 	vsub.f32	s15, s14, s13
 800338a:	ee77 4a26 	vadd.f32	s9, s14, s13
 800338e:	ee33 4a85 	vadd.f32	s8, s7, s10
 8003392:	ee66 6a27 	vmul.f32	s13, s12, s15
 8003396:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800339a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800339e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80033a2:	ee77 7a05 	vadd.f32	s15, s14, s10
 80033a6:	ee26 6a04 	vmul.f32	s12, s12, s8
 80033aa:	ee65 5a84 	vmul.f32	s11, s11, s8
 80033ae:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80033b2:	ee36 7aa5 	vadd.f32	s14, s13, s11
 80033b6:	ee67 7a83 	vmul.f32	s15, s15, s6
 80033ba:	ee27 7a03 	vmul.f32	s14, s14, s6
 80033be:	3e01      	subs	r6, #1
 80033c0:	ed02 7a02 	vstr	s14, [r2, #-8]
 80033c4:	ed42 7a01 	vstr	s15, [r2, #-4]
 80033c8:	f1a3 0308 	sub.w	r3, r3, #8
 80033cc:	f101 0108 	add.w	r1, r1, #8
 80033d0:	f100 0008 	add.w	r0, r0, #8
 80033d4:	f102 0208 	add.w	r2, r2, #8
 80033d8:	d1c9      	bne.n	800336e <arm_rfft_fast_f32+0x5e>
 80033da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033de:	edd1 7a00 	vldr	s15, [r1]
 80033e2:	edd1 6a01 	vldr	s13, [r1, #4]
 80033e6:	6941      	ldr	r1, [r0, #20]
 80033e8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80033ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033f0:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 80033f4:	ee27 7a23 	vmul.f32	s14, s14, s7
 80033f8:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80033fc:	3e01      	subs	r6, #1
 80033fe:	ed82 7a00 	vstr	s14, [r2]
 8003402:	edc2 7a01 	vstr	s15, [r2, #4]
 8003406:	00f0      	lsls	r0, r6, #3
 8003408:	b3ee      	cbz	r6, 8003486 <arm_rfft_fast_f32+0x176>
 800340a:	3808      	subs	r0, #8
 800340c:	f101 0e10 	add.w	lr, r1, #16
 8003410:	4420      	add	r0, r4
 8003412:	f104 0110 	add.w	r1, r4, #16
 8003416:	f102 0c10 	add.w	ip, r2, #16
 800341a:	ed90 7a02 	vldr	s14, [r0, #8]
 800341e:	ed51 6a02 	vldr	s13, [r1, #-8]
 8003422:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8003426:	ed90 4a03 	vldr	s8, [r0, #12]
 800342a:	ed11 5a01 	vldr	s10, [r1, #-4]
 800342e:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8003432:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8003436:	ee74 4a05 	vadd.f32	s9, s8, s10
 800343a:	ee26 3a27 	vmul.f32	s6, s12, s15
 800343e:	ee77 6a26 	vadd.f32	s13, s14, s13
 8003442:	ee35 5a44 	vsub.f32	s10, s10, s8
 8003446:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800344a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800344e:	ee77 7a05 	vadd.f32	s15, s14, s10
 8003452:	ee26 6a24 	vmul.f32	s12, s12, s9
 8003456:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800345a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800345e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8003462:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8003466:	ee27 7a23 	vmul.f32	s14, s14, s7
 800346a:	3e01      	subs	r6, #1
 800346c:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8003470:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8003474:	f1a0 0008 	sub.w	r0, r0, #8
 8003478:	f101 0108 	add.w	r1, r1, #8
 800347c:	f10e 0e08 	add.w	lr, lr, #8
 8003480:	f10c 0c08 	add.w	ip, ip, #8
 8003484:	d1c9      	bne.n	800341a <arm_rfft_fast_f32+0x10a>
 8003486:	461a      	mov	r2, r3
 8003488:	4629      	mov	r1, r5
 800348a:	4638      	mov	r0, r7
 800348c:	2301      	movs	r3, #1
 800348e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003492:	f000 bb2f 	b.w	8003af4 <arm_cfft_f32>
 8003496:	bf00      	nop

08003498 <arm_cfft_radix8by2_f32>:
 8003498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800349c:	ed2d 8b08 	vpush	{d8-d11}
 80034a0:	4607      	mov	r7, r0
 80034a2:	4608      	mov	r0, r1
 80034a4:	f8b7 e000 	ldrh.w	lr, [r7]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	ea4f 015e 	mov.w	r1, lr, lsr #1
 80034ae:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 80034b2:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80034b6:	f000 80b0 	beq.w	800361a <arm_cfft_radix8by2_f32+0x182>
 80034ba:	008b      	lsls	r3, r1, #2
 80034bc:	3310      	adds	r3, #16
 80034be:	18c6      	adds	r6, r0, r3
 80034c0:	3210      	adds	r2, #16
 80034c2:	4443      	add	r3, r8
 80034c4:	f100 0510 	add.w	r5, r0, #16
 80034c8:	f108 0410 	add.w	r4, r8, #16
 80034cc:	ed54 1a04 	vldr	s3, [r4, #-16]
 80034d0:	ed54 6a03 	vldr	s13, [r4, #-12]
 80034d4:	ed13 4a04 	vldr	s8, [r3, #-16]
 80034d8:	ed53 3a03 	vldr	s7, [r3, #-12]
 80034dc:	ed53 5a02 	vldr	s11, [r3, #-8]
 80034e0:	ed13 5a01 	vldr	s10, [r3, #-4]
 80034e4:	ed14 0a02 	vldr	s0, [r4, #-8]
 80034e8:	ed54 7a01 	vldr	s15, [r4, #-4]
 80034ec:	ed16 2a04 	vldr	s4, [r6, #-16]
 80034f0:	ed56 2a03 	vldr	s5, [r6, #-12]
 80034f4:	ed15 6a03 	vldr	s12, [r5, #-12]
 80034f8:	ed15 7a01 	vldr	s14, [r5, #-4]
 80034fc:	ed15 3a04 	vldr	s6, [r5, #-16]
 8003500:	ed56 0a02 	vldr	s1, [r6, #-8]
 8003504:	ed16 1a01 	vldr	s2, [r6, #-4]
 8003508:	ed55 4a02 	vldr	s9, [r5, #-8]
 800350c:	ee73 ba21 	vadd.f32	s23, s6, s3
 8003510:	ee36 ba26 	vadd.f32	s22, s12, s13
 8003514:	ee37 aa27 	vadd.f32	s20, s14, s15
 8003518:	ee72 9a04 	vadd.f32	s19, s4, s8
 800351c:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8003520:	ee31 8a05 	vadd.f32	s16, s2, s10
 8003524:	ee74 aa80 	vadd.f32	s21, s9, s0
 8003528:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800352c:	ed45 ba04 	vstr	s23, [r5, #-16]
 8003530:	ed05 ba03 	vstr	s22, [r5, #-12]
 8003534:	ed45 aa02 	vstr	s21, [r5, #-8]
 8003538:	ed05 aa01 	vstr	s20, [r5, #-4]
 800353c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8003540:	ed46 9a04 	vstr	s19, [r6, #-16]
 8003544:	ed06 9a03 	vstr	s18, [r6, #-12]
 8003548:	ed46 8a02 	vstr	s17, [r6, #-8]
 800354c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8003550:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8003554:	ed12 6a03 	vldr	s12, [r2, #-12]
 8003558:	ed52 2a04 	vldr	s5, [r2, #-16]
 800355c:	ee33 3a61 	vsub.f32	s6, s6, s3
 8003560:	ee34 4a42 	vsub.f32	s8, s8, s4
 8003564:	ee26 8a86 	vmul.f32	s16, s13, s12
 8003568:	ee24 2a06 	vmul.f32	s4, s8, s12
 800356c:	ee63 1a22 	vmul.f32	s3, s6, s5
 8003570:	ee24 4a22 	vmul.f32	s8, s8, s5
 8003574:	ee23 3a06 	vmul.f32	s6, s6, s12
 8003578:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800357c:	ee23 6a86 	vmul.f32	s12, s7, s12
 8003580:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8003584:	ee36 6a04 	vadd.f32	s12, s12, s8
 8003588:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800358c:	ee72 3a63 	vsub.f32	s7, s4, s7
 8003590:	ee71 2a88 	vadd.f32	s5, s3, s16
 8003594:	ed44 6a03 	vstr	s13, [r4, #-12]
 8003598:	ed44 2a04 	vstr	s5, [r4, #-16]
 800359c:	ed43 3a04 	vstr	s7, [r3, #-16]
 80035a0:	ed03 6a03 	vstr	s12, [r3, #-12]
 80035a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035a8:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80035ac:	ed12 7a01 	vldr	s14, [r2, #-4]
 80035b0:	ed52 5a02 	vldr	s11, [r2, #-8]
 80035b4:	ee35 6a41 	vsub.f32	s12, s10, s2
 80035b8:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80035bc:	ee67 3a87 	vmul.f32	s7, s15, s14
 80035c0:	ee26 5a87 	vmul.f32	s10, s13, s14
 80035c4:	ee24 4aa5 	vmul.f32	s8, s9, s11
 80035c8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80035cc:	ee64 4a87 	vmul.f32	s9, s9, s14
 80035d0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80035d4:	ee26 7a07 	vmul.f32	s14, s12, s14
 80035d8:	ee26 6a25 	vmul.f32	s12, s12, s11
 80035dc:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80035e0:	ee74 5a23 	vadd.f32	s11, s8, s7
 80035e4:	ee35 6a46 	vsub.f32	s12, s10, s12
 80035e8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80035ec:	f1be 0e01 	subs.w	lr, lr, #1
 80035f0:	ed44 5a02 	vstr	s11, [r4, #-8]
 80035f4:	f105 0510 	add.w	r5, r5, #16
 80035f8:	ed44 7a01 	vstr	s15, [r4, #-4]
 80035fc:	f106 0610 	add.w	r6, r6, #16
 8003600:	ed03 6a02 	vstr	s12, [r3, #-8]
 8003604:	ed03 7a01 	vstr	s14, [r3, #-4]
 8003608:	f102 0210 	add.w	r2, r2, #16
 800360c:	f104 0410 	add.w	r4, r4, #16
 8003610:	f103 0310 	add.w	r3, r3, #16
 8003614:	f47f af5a 	bne.w	80034cc <arm_cfft_radix8by2_f32+0x34>
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	b28c      	uxth	r4, r1
 800361c:	4621      	mov	r1, r4
 800361e:	2302      	movs	r3, #2
 8003620:	f000 fb3a 	bl	8003c98 <arm_radix8_butterfly_f32>
 8003624:	ecbd 8b08 	vpop	{d8-d11}
 8003628:	4621      	mov	r1, r4
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	4640      	mov	r0, r8
 800362e:	2302      	movs	r3, #2
 8003630:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003634:	f000 bb30 	b.w	8003c98 <arm_radix8_butterfly_f32>

08003638 <arm_cfft_radix8by4_f32>:
 8003638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800363c:	ed2d 8b0a 	vpush	{d8-d12}
 8003640:	8802      	ldrh	r2, [r0, #0]
 8003642:	ed91 6a00 	vldr	s12, [r1]
 8003646:	b08f      	sub	sp, #60	; 0x3c
 8003648:	460f      	mov	r7, r1
 800364a:	0852      	lsrs	r2, r2, #1
 800364c:	6841      	ldr	r1, [r0, #4]
 800364e:	900c      	str	r0, [sp, #48]	; 0x30
 8003650:	0093      	lsls	r3, r2, #2
 8003652:	4638      	mov	r0, r7
 8003654:	4418      	add	r0, r3
 8003656:	4606      	mov	r6, r0
 8003658:	9009      	str	r0, [sp, #36]	; 0x24
 800365a:	4418      	add	r0, r3
 800365c:	edd0 6a00 	vldr	s13, [r0]
 8003660:	ed96 4a00 	vldr	s8, [r6]
 8003664:	edd6 2a01 	vldr	s5, [r6, #4]
 8003668:	edd0 7a01 	vldr	s15, [r0, #4]
 800366c:	900a      	str	r0, [sp, #40]	; 0x28
 800366e:	ee76 5a26 	vadd.f32	s11, s12, s13
 8003672:	4604      	mov	r4, r0
 8003674:	4625      	mov	r5, r4
 8003676:	441c      	add	r4, r3
 8003678:	edd4 4a00 	vldr	s9, [r4]
 800367c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003680:	ed94 3a01 	vldr	s6, [r4, #4]
 8003684:	9401      	str	r4, [sp, #4]
 8003686:	ee35 5a84 	vadd.f32	s10, s11, s8
 800368a:	4630      	mov	r0, r6
 800368c:	ee35 5a24 	vadd.f32	s10, s10, s9
 8003690:	463e      	mov	r6, r7
 8003692:	ee15 ea10 	vmov	lr, s10
 8003696:	ee76 6a66 	vsub.f32	s13, s12, s13
 800369a:	f846 eb08 	str.w	lr, [r6], #8
 800369e:	ee37 6a27 	vadd.f32	s12, s14, s15
 80036a2:	ed90 5a01 	vldr	s10, [r0, #4]
 80036a6:	9605      	str	r6, [sp, #20]
 80036a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ac:	9e01      	ldr	r6, [sp, #4]
 80036ae:	9707      	str	r7, [sp, #28]
 80036b0:	ee76 3aa2 	vadd.f32	s7, s13, s5
 80036b4:	ed96 2a01 	vldr	s4, [r6, #4]
 80036b8:	ee36 7a05 	vadd.f32	s14, s12, s10
 80036bc:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80036c0:	ee37 5ac4 	vsub.f32	s10, s15, s8
 80036c4:	ee77 7a84 	vadd.f32	s15, s15, s8
 80036c8:	ee33 4ac3 	vsub.f32	s8, s7, s6
 80036cc:	4604      	mov	r4, r0
 80036ce:	46a3      	mov	fp, r4
 80036d0:	ee37 7a02 	vadd.f32	s14, s14, s4
 80036d4:	ee35 5a24 	vadd.f32	s10, s10, s9
 80036d8:	ee14 8a10 	vmov	r8, s8
 80036dc:	46a4      	mov	ip, r4
 80036de:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80036e2:	ed87 7a01 	vstr	s14, [r7, #4]
 80036e6:	f84b 8b08 	str.w	r8, [fp], #8
 80036ea:	f1ac 0704 	sub.w	r7, ip, #4
 80036ee:	ed8c 5a01 	vstr	s10, [ip, #4]
 80036f2:	f101 0c08 	add.w	ip, r1, #8
 80036f6:	462c      	mov	r4, r5
 80036f8:	f8cd c010 	str.w	ip, [sp, #16]
 80036fc:	ee15 ca90 	vmov	ip, s11
 8003700:	ee36 6a62 	vsub.f32	s12, s12, s5
 8003704:	f844 cb08 	str.w	ip, [r4], #8
 8003708:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800370c:	ee36 6a43 	vsub.f32	s12, s12, s6
 8003710:	9406      	str	r4, [sp, #24]
 8003712:	ee76 6a83 	vadd.f32	s13, s13, s6
 8003716:	f101 0410 	add.w	r4, r1, #16
 800371a:	0852      	lsrs	r2, r2, #1
 800371c:	9402      	str	r4, [sp, #8]
 800371e:	ed85 6a01 	vstr	s12, [r5, #4]
 8003722:	462c      	mov	r4, r5
 8003724:	f101 0518 	add.w	r5, r1, #24
 8003728:	920b      	str	r2, [sp, #44]	; 0x2c
 800372a:	46b2      	mov	sl, r6
 800372c:	9503      	str	r5, [sp, #12]
 800372e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8003732:	3a02      	subs	r2, #2
 8003734:	ee16 5a90 	vmov	r5, s13
 8003738:	46b6      	mov	lr, r6
 800373a:	4630      	mov	r0, r6
 800373c:	0852      	lsrs	r2, r2, #1
 800373e:	f84a 5b08 	str.w	r5, [sl], #8
 8003742:	f1a0 0604 	sub.w	r6, r0, #4
 8003746:	edce 7a01 	vstr	s15, [lr, #4]
 800374a:	9208      	str	r2, [sp, #32]
 800374c:	f000 8130 	beq.w	80039b0 <arm_cfft_radix8by4_f32+0x378>
 8003750:	4691      	mov	r9, r2
 8003752:	9a07      	ldr	r2, [sp, #28]
 8003754:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003758:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800375c:	3b08      	subs	r3, #8
 800375e:	f102 0510 	add.w	r5, r2, #16
 8003762:	f101 0c20 	add.w	ip, r1, #32
 8003766:	f1a4 020c 	sub.w	r2, r4, #12
 800376a:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800376e:	4433      	add	r3, r6
 8003770:	3410      	adds	r4, #16
 8003772:	4650      	mov	r0, sl
 8003774:	4659      	mov	r1, fp
 8003776:	ed55 3a02 	vldr	s7, [r5, #-8]
 800377a:	ed14 5a02 	vldr	s10, [r4, #-8]
 800377e:	ed91 7a00 	vldr	s14, [r1]
 8003782:	edd0 7a00 	vldr	s15, [r0]
 8003786:	ed54 5a01 	vldr	s11, [r4, #-4]
 800378a:	ed15 4a01 	vldr	s8, [r5, #-4]
 800378e:	edd0 6a01 	vldr	s13, [r0, #4]
 8003792:	ed91 6a01 	vldr	s12, [r1, #4]
 8003796:	ee33 8a85 	vadd.f32	s16, s7, s10
 800379a:	ee34 0a25 	vadd.f32	s0, s8, s11
 800379e:	ee78 4a07 	vadd.f32	s9, s16, s14
 80037a2:	ee74 5a65 	vsub.f32	s11, s8, s11
 80037a6:	ee74 4aa7 	vadd.f32	s9, s9, s15
 80037aa:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80037ae:	ed45 4a02 	vstr	s9, [r5, #-8]
 80037b2:	edd1 4a01 	vldr	s9, [r1, #4]
 80037b6:	ed90 4a01 	vldr	s8, [r0, #4]
 80037ba:	ee70 4a24 	vadd.f32	s9, s0, s9
 80037be:	ee75 aa06 	vadd.f32	s21, s10, s12
 80037c2:	ee74 4a84 	vadd.f32	s9, s9, s8
 80037c6:	ee35 aac7 	vsub.f32	s20, s11, s14
 80037ca:	ed45 4a01 	vstr	s9, [r5, #-4]
 80037ce:	edd6 1a00 	vldr	s3, [r6]
 80037d2:	edd7 0a00 	vldr	s1, [r7]
 80037d6:	ed92 4a02 	vldr	s8, [r2, #8]
 80037da:	edd3 3a02 	vldr	s7, [r3, #8]
 80037de:	ed93 2a01 	vldr	s4, [r3, #4]
 80037e2:	ed16 1a01 	vldr	s2, [r6, #-4]
 80037e6:	edd2 2a01 	vldr	s5, [r2, #4]
 80037ea:	ed57 9a01 	vldr	s19, [r7, #-4]
 80037ee:	ee70 4aa1 	vadd.f32	s9, s1, s3
 80037f2:	ee39 3a81 	vadd.f32	s6, s19, s2
 80037f6:	ee74 8a84 	vadd.f32	s17, s9, s8
 80037fa:	ee70 1ae1 	vsub.f32	s3, s1, s3
 80037fe:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8003802:	ee7a aae6 	vsub.f32	s21, s21, s13
 8003806:	ee18 aa90 	vmov	sl, s17
 800380a:	f847 a908 	str.w	sl, [r7], #-8
 800380e:	edd2 8a01 	vldr	s17, [r2, #4]
 8003812:	ed93 9a01 	vldr	s18, [r3, #4]
 8003816:	ee73 8a28 	vadd.f32	s17, s6, s17
 800381a:	ee3a aa27 	vadd.f32	s20, s20, s15
 800381e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8003822:	ee74 0a63 	vsub.f32	s1, s8, s7
 8003826:	edc7 8a01 	vstr	s17, [r7, #4]
 800382a:	ed18 ba02 	vldr	s22, [r8, #-8]
 800382e:	ed58 8a01 	vldr	s17, [r8, #-4]
 8003832:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8003836:	ee6a ba28 	vmul.f32	s23, s20, s17
 800383a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800383e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8003842:	ee31 9a20 	vadd.f32	s18, s2, s1
 8003846:	ee79 9a82 	vadd.f32	s19, s19, s4
 800384a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800384e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8003852:	ee69 baa8 	vmul.f32	s23, s19, s17
 8003856:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800385a:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800385e:	ee69 8a28 	vmul.f32	s17, s18, s17
 8003862:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8003866:	ee1c aa10 	vmov	sl, s24
 800386a:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800386e:	f841 ab08 	str.w	sl, [r1], #8
 8003872:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8003876:	ee3b bacb 	vsub.f32	s22, s23, s22
 800387a:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800387e:	ee33 3a62 	vsub.f32	s6, s6, s5
 8003882:	ed01 aa01 	vstr	s20, [r1, #-4]
 8003886:	edc2 8a01 	vstr	s17, [r2, #4]
 800388a:	ed82 ba02 	vstr	s22, [r2, #8]
 800388e:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8003892:	ee74 3a63 	vsub.f32	s7, s8, s7
 8003896:	ee38 8a47 	vsub.f32	s16, s16, s14
 800389a:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800389e:	ee30 0a46 	vsub.f32	s0, s0, s12
 80038a2:	ee33 3a42 	vsub.f32	s6, s6, s4
 80038a6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80038aa:	ee30 0a66 	vsub.f32	s0, s0, s13
 80038ae:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80038b2:	ee63 8a04 	vmul.f32	s17, s6, s8
 80038b6:	ee28 aa24 	vmul.f32	s20, s16, s9
 80038ba:	ee60 9a04 	vmul.f32	s19, s0, s8
 80038be:	ee28 8a04 	vmul.f32	s16, s16, s8
 80038c2:	ee20 0a24 	vmul.f32	s0, s0, s9
 80038c6:	ee63 3a84 	vmul.f32	s7, s7, s8
 80038ca:	ee39 4a68 	vsub.f32	s8, s18, s17
 80038ce:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80038d2:	ee14 aa10 	vmov	sl, s8
 80038d6:	ee30 0a48 	vsub.f32	s0, s0, s16
 80038da:	ee63 4a24 	vmul.f32	s9, s6, s9
 80038de:	ed44 9a02 	vstr	s19, [r4, #-8]
 80038e2:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80038e6:	ed04 0a01 	vstr	s0, [r4, #-4]
 80038ea:	f846 a908 	str.w	sl, [r6], #-8
 80038ee:	ee35 6a46 	vsub.f32	s12, s10, s12
 80038f2:	ee35 7a87 	vadd.f32	s14, s11, s14
 80038f6:	edc6 3a01 	vstr	s7, [r6, #4]
 80038fa:	ee76 6a26 	vadd.f32	s13, s12, s13
 80038fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003902:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8003906:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800390a:	ee67 5a86 	vmul.f32	s11, s15, s12
 800390e:	ee26 5a87 	vmul.f32	s10, s13, s14
 8003912:	ee72 2a62 	vsub.f32	s5, s4, s5
 8003916:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800391a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800391e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8003922:	ee62 0a86 	vmul.f32	s1, s5, s12
 8003926:	ee66 6a86 	vmul.f32	s13, s13, s12
 800392a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800392e:	ee21 6a06 	vmul.f32	s12, s2, s12
 8003932:	ee62 2a87 	vmul.f32	s5, s5, s14
 8003936:	ee21 1a07 	vmul.f32	s2, s2, s14
 800393a:	ee15 aa90 	vmov	sl, s11
 800393e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003942:	f840 ab08 	str.w	sl, [r0], #8
 8003946:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800394a:	ee76 2a22 	vadd.f32	s5, s12, s5
 800394e:	f1b9 0901 	subs.w	r9, r9, #1
 8003952:	ed40 7a01 	vstr	s15, [r0, #-4]
 8003956:	f105 0508 	add.w	r5, r5, #8
 800395a:	ed83 1a02 	vstr	s2, [r3, #8]
 800395e:	edc3 2a01 	vstr	s5, [r3, #4]
 8003962:	f108 0808 	add.w	r8, r8, #8
 8003966:	f1a2 0208 	sub.w	r2, r2, #8
 800396a:	f10c 0c10 	add.w	ip, ip, #16
 800396e:	f104 0408 	add.w	r4, r4, #8
 8003972:	f10e 0e18 	add.w	lr, lr, #24
 8003976:	f1a3 0308 	sub.w	r3, r3, #8
 800397a:	f47f aefc 	bne.w	8003776 <arm_cfft_radix8by4_f32+0x13e>
 800397e:	9908      	ldr	r1, [sp, #32]
 8003980:	9802      	ldr	r0, [sp, #8]
 8003982:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8003986:	00cb      	lsls	r3, r1, #3
 8003988:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800398c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003990:	9102      	str	r1, [sp, #8]
 8003992:	9905      	ldr	r1, [sp, #20]
 8003994:	4419      	add	r1, r3
 8003996:	9105      	str	r1, [sp, #20]
 8003998:	9904      	ldr	r1, [sp, #16]
 800399a:	4419      	add	r1, r3
 800399c:	9104      	str	r1, [sp, #16]
 800399e:	9906      	ldr	r1, [sp, #24]
 80039a0:	449b      	add	fp, r3
 80039a2:	4419      	add	r1, r3
 80039a4:	449a      	add	sl, r3
 80039a6:	9b03      	ldr	r3, [sp, #12]
 80039a8:	9106      	str	r1, [sp, #24]
 80039aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80039ae:	9303      	str	r3, [sp, #12]
 80039b0:	9a05      	ldr	r2, [sp, #20]
 80039b2:	9806      	ldr	r0, [sp, #24]
 80039b4:	ed92 4a00 	vldr	s8, [r2]
 80039b8:	ed90 7a00 	vldr	s14, [r0]
 80039bc:	ed9b 3a00 	vldr	s6, [fp]
 80039c0:	edda 3a00 	vldr	s7, [sl]
 80039c4:	edd2 4a01 	vldr	s9, [r2, #4]
 80039c8:	edd0 6a01 	vldr	s13, [r0, #4]
 80039cc:	ed9a 2a01 	vldr	s4, [sl, #4]
 80039d0:	eddb 7a01 	vldr	s15, [fp, #4]
 80039d4:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 80039d8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80039da:	ee34 6a07 	vadd.f32	s12, s8, s14
 80039de:	ee74 5aa6 	vadd.f32	s11, s9, s13
 80039e2:	ee36 5a03 	vadd.f32	s10, s12, s6
 80039e6:	ee74 6ae6 	vsub.f32	s13, s9, s13
 80039ea:	ee35 5a23 	vadd.f32	s10, s10, s7
 80039ee:	ee34 7a47 	vsub.f32	s14, s8, s14
 80039f2:	ed82 5a00 	vstr	s10, [r2]
 80039f6:	ed9b 5a01 	vldr	s10, [fp, #4]
 80039fa:	edda 4a01 	vldr	s9, [sl, #4]
 80039fe:	ee35 5a85 	vadd.f32	s10, s11, s10
 8003a02:	ee37 4a27 	vadd.f32	s8, s14, s15
 8003a06:	ee35 5a24 	vadd.f32	s10, s10, s9
 8003a0a:	ee76 4ac3 	vsub.f32	s9, s13, s6
 8003a0e:	ed82 5a01 	vstr	s10, [r2, #4]
 8003a12:	9a04      	ldr	r2, [sp, #16]
 8003a14:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8003a18:	edd2 1a00 	vldr	s3, [r2]
 8003a1c:	edd2 2a01 	vldr	s5, [r2, #4]
 8003a20:	9a02      	ldr	r2, [sp, #8]
 8003a22:	ee34 4a42 	vsub.f32	s8, s8, s4
 8003a26:	ee36 6a43 	vsub.f32	s12, s12, s6
 8003a2a:	ee64 4a21 	vmul.f32	s9, s8, s3
 8003a2e:	ee24 4a22 	vmul.f32	s8, s8, s5
 8003a32:	ee65 2a22 	vmul.f32	s5, s10, s5
 8003a36:	ee25 5a21 	vmul.f32	s10, s10, s3
 8003a3a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8003a3e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8003a42:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003a46:	edcb 2a00 	vstr	s5, [fp]
 8003a4a:	ed8b 5a01 	vstr	s10, [fp, #4]
 8003a4e:	ed92 4a01 	vldr	s8, [r2, #4]
 8003a52:	ed92 5a00 	vldr	s10, [r2]
 8003a56:	9a03      	ldr	r2, [sp, #12]
 8003a58:	ee36 6a63 	vsub.f32	s12, s12, s7
 8003a5c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8003a60:	ee66 4a05 	vmul.f32	s9, s12, s10
 8003a64:	ee25 5a85 	vmul.f32	s10, s11, s10
 8003a68:	ee26 6a04 	vmul.f32	s12, s12, s8
 8003a6c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8003a70:	ee35 6a46 	vsub.f32	s12, s10, s12
 8003a74:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8003a78:	ee76 6a83 	vadd.f32	s13, s13, s6
 8003a7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a80:	ed80 6a01 	vstr	s12, [r0, #4]
 8003a84:	edc0 5a00 	vstr	s11, [r0]
 8003a88:	edd2 5a01 	vldr	s11, [r2, #4]
 8003a8c:	9807      	ldr	r0, [sp, #28]
 8003a8e:	ee77 7a02 	vadd.f32	s15, s14, s4
 8003a92:	ee36 7ae3 	vsub.f32	s14, s13, s7
 8003a96:	edd2 6a00 	vldr	s13, [r2]
 8003a9a:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8003a9e:	ee67 6a26 	vmul.f32	s13, s14, s13
 8003aa2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003aa6:	ee27 7a25 	vmul.f32	s14, s14, s11
 8003aaa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003aae:	ee36 7a07 	vadd.f32	s14, s12, s14
 8003ab2:	edca 7a01 	vstr	s15, [sl, #4]
 8003ab6:	ed8a 7a00 	vstr	s14, [sl]
 8003aba:	6872      	ldr	r2, [r6, #4]
 8003abc:	4621      	mov	r1, r4
 8003abe:	2304      	movs	r3, #4
 8003ac0:	f000 f8ea 	bl	8003c98 <arm_radix8_butterfly_f32>
 8003ac4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ac6:	6872      	ldr	r2, [r6, #4]
 8003ac8:	4621      	mov	r1, r4
 8003aca:	2304      	movs	r3, #4
 8003acc:	f000 f8e4 	bl	8003c98 <arm_radix8_butterfly_f32>
 8003ad0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003ad2:	6872      	ldr	r2, [r6, #4]
 8003ad4:	4621      	mov	r1, r4
 8003ad6:	2304      	movs	r3, #4
 8003ad8:	f000 f8de 	bl	8003c98 <arm_radix8_butterfly_f32>
 8003adc:	6872      	ldr	r2, [r6, #4]
 8003ade:	9801      	ldr	r0, [sp, #4]
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	2304      	movs	r3, #4
 8003ae4:	b00f      	add	sp, #60	; 0x3c
 8003ae6:	ecbd 8b0a 	vpop	{d8-d12}
 8003aea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aee:	f000 b8d3 	b.w	8003c98 <arm_radix8_butterfly_f32>
 8003af2:	bf00      	nop

08003af4 <arm_cfft_f32>:
 8003af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003af8:	2a01      	cmp	r2, #1
 8003afa:	4606      	mov	r6, r0
 8003afc:	4617      	mov	r7, r2
 8003afe:	460c      	mov	r4, r1
 8003b00:	4698      	mov	r8, r3
 8003b02:	8805      	ldrh	r5, [r0, #0]
 8003b04:	d054      	beq.n	8003bb0 <arm_cfft_f32+0xbc>
 8003b06:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8003b0a:	d04c      	beq.n	8003ba6 <arm_cfft_f32+0xb2>
 8003b0c:	d916      	bls.n	8003b3c <arm_cfft_f32+0x48>
 8003b0e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8003b12:	d01a      	beq.n	8003b4a <arm_cfft_f32+0x56>
 8003b14:	d95c      	bls.n	8003bd0 <arm_cfft_f32+0xdc>
 8003b16:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8003b1a:	d044      	beq.n	8003ba6 <arm_cfft_f32+0xb2>
 8003b1c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8003b20:	d105      	bne.n	8003b2e <arm_cfft_f32+0x3a>
 8003b22:	2301      	movs	r3, #1
 8003b24:	6872      	ldr	r2, [r6, #4]
 8003b26:	4629      	mov	r1, r5
 8003b28:	4620      	mov	r0, r4
 8003b2a:	f000 f8b5 	bl	8003c98 <arm_radix8_butterfly_f32>
 8003b2e:	f1b8 0f00 	cmp.w	r8, #0
 8003b32:	d111      	bne.n	8003b58 <arm_cfft_f32+0x64>
 8003b34:	2f01      	cmp	r7, #1
 8003b36:	d016      	beq.n	8003b66 <arm_cfft_f32+0x72>
 8003b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b3c:	2d20      	cmp	r5, #32
 8003b3e:	d032      	beq.n	8003ba6 <arm_cfft_f32+0xb2>
 8003b40:	d94a      	bls.n	8003bd8 <arm_cfft_f32+0xe4>
 8003b42:	2d40      	cmp	r5, #64	; 0x40
 8003b44:	d0ed      	beq.n	8003b22 <arm_cfft_f32+0x2e>
 8003b46:	2d80      	cmp	r5, #128	; 0x80
 8003b48:	d1f1      	bne.n	8003b2e <arm_cfft_f32+0x3a>
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	4630      	mov	r0, r6
 8003b4e:	f7ff fca3 	bl	8003498 <arm_cfft_radix8by2_f32>
 8003b52:	f1b8 0f00 	cmp.w	r8, #0
 8003b56:	d0ed      	beq.n	8003b34 <arm_cfft_f32+0x40>
 8003b58:	68b2      	ldr	r2, [r6, #8]
 8003b5a:	89b1      	ldrh	r1, [r6, #12]
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	f7fc fb3b 	bl	80001d8 <arm_bitreversal_32>
 8003b62:	2f01      	cmp	r7, #1
 8003b64:	d1e8      	bne.n	8003b38 <arm_cfft_f32+0x44>
 8003b66:	ee07 5a90 	vmov	s15, r5
 8003b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b72:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003b76:	2d00      	cmp	r5, #0
 8003b78:	d0de      	beq.n	8003b38 <arm_cfft_f32+0x44>
 8003b7a:	f104 0108 	add.w	r1, r4, #8
 8003b7e:	2300      	movs	r3, #0
 8003b80:	3301      	adds	r3, #1
 8003b82:	429d      	cmp	r5, r3
 8003b84:	f101 0108 	add.w	r1, r1, #8
 8003b88:	ed11 7a04 	vldr	s14, [r1, #-16]
 8003b8c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8003b90:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003b94:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8003b98:	ed01 7a04 	vstr	s14, [r1, #-16]
 8003b9c:	ed41 7a03 	vstr	s15, [r1, #-12]
 8003ba0:	d1ee      	bne.n	8003b80 <arm_cfft_f32+0x8c>
 8003ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ba6:	4621      	mov	r1, r4
 8003ba8:	4630      	mov	r0, r6
 8003baa:	f7ff fd45 	bl	8003638 <arm_cfft_radix8by4_f32>
 8003bae:	e7be      	b.n	8003b2e <arm_cfft_f32+0x3a>
 8003bb0:	b1ad      	cbz	r5, 8003bde <arm_cfft_f32+0xea>
 8003bb2:	f101 030c 	add.w	r3, r1, #12
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	ed53 7a02 	vldr	s15, [r3, #-8]
 8003bbc:	3201      	adds	r2, #1
 8003bbe:	eef1 7a67 	vneg.f32	s15, s15
 8003bc2:	4295      	cmp	r5, r2
 8003bc4:	ed43 7a02 	vstr	s15, [r3, #-8]
 8003bc8:	f103 0308 	add.w	r3, r3, #8
 8003bcc:	d1f4      	bne.n	8003bb8 <arm_cfft_f32+0xc4>
 8003bce:	e79a      	b.n	8003b06 <arm_cfft_f32+0x12>
 8003bd0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8003bd4:	d0a5      	beq.n	8003b22 <arm_cfft_f32+0x2e>
 8003bd6:	e7aa      	b.n	8003b2e <arm_cfft_f32+0x3a>
 8003bd8:	2d10      	cmp	r5, #16
 8003bda:	d0b6      	beq.n	8003b4a <arm_cfft_f32+0x56>
 8003bdc:	e7a7      	b.n	8003b2e <arm_cfft_f32+0x3a>
 8003bde:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8003be2:	d894      	bhi.n	8003b0e <arm_cfft_f32+0x1a>
 8003be4:	e7aa      	b.n	8003b3c <arm_cfft_f32+0x48>
 8003be6:	bf00      	nop

08003be8 <arm_cmplx_mag_squared_f32>:
 8003be8:	b470      	push	{r4, r5, r6}
 8003bea:	0896      	lsrs	r6, r2, #2
 8003bec:	d03e      	beq.n	8003c6c <arm_cmplx_mag_squared_f32+0x84>
 8003bee:	f100 0320 	add.w	r3, r0, #32
 8003bf2:	f101 0410 	add.w	r4, r1, #16
 8003bf6:	4635      	mov	r5, r6
 8003bf8:	ed13 6a08 	vldr	s12, [r3, #-32]	; 0xffffffe0
 8003bfc:	ed13 4a07 	vldr	s8, [r3, #-28]	; 0xffffffe4
 8003c00:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 8003c04:	ed53 4a05 	vldr	s9, [r3, #-20]	; 0xffffffec
 8003c08:	ed13 7a04 	vldr	s14, [r3, #-16]
 8003c0c:	ed13 5a03 	vldr	s10, [r3, #-12]
 8003c10:	ed53 7a02 	vldr	s15, [r3, #-8]
 8003c14:	ed53 5a01 	vldr	s11, [r3, #-4]
 8003c18:	ee26 6a06 	vmul.f32	s12, s12, s12
 8003c1c:	ee24 4a04 	vmul.f32	s8, s8, s8
 8003c20:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8003c24:	ee64 4aa4 	vmul.f32	s9, s9, s9
 8003c28:	ee27 7a07 	vmul.f32	s14, s14, s14
 8003c2c:	ee25 5a05 	vmul.f32	s10, s10, s10
 8003c30:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003c34:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8003c38:	ee36 6a04 	vadd.f32	s12, s12, s8
 8003c3c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8003c40:	ee37 7a05 	vadd.f32	s14, s14, s10
 8003c44:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8003c48:	3d01      	subs	r5, #1
 8003c4a:	ed04 6a04 	vstr	s12, [r4, #-16]
 8003c4e:	ed44 6a03 	vstr	s13, [r4, #-12]
 8003c52:	ed04 7a02 	vstr	s14, [r4, #-8]
 8003c56:	ed44 7a01 	vstr	s15, [r4, #-4]
 8003c5a:	f103 0320 	add.w	r3, r3, #32
 8003c5e:	f104 0410 	add.w	r4, r4, #16
 8003c62:	d1c9      	bne.n	8003bf8 <arm_cmplx_mag_squared_f32+0x10>
 8003c64:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 8003c68:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 8003c6c:	f012 0203 	ands.w	r2, r2, #3
 8003c70:	d010      	beq.n	8003c94 <arm_cmplx_mag_squared_f32+0xac>
 8003c72:	3008      	adds	r0, #8
 8003c74:	ed50 7a02 	vldr	s15, [r0, #-8]
 8003c78:	ed10 7a01 	vldr	s14, [r0, #-4]
 8003c7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003c80:	ee27 7a07 	vmul.f32	s14, s14, s14
 8003c84:	3a01      	subs	r2, #1
 8003c86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c8a:	f100 0008 	add.w	r0, r0, #8
 8003c8e:	ece1 7a01 	vstmia	r1!, {s15}
 8003c92:	d1ef      	bne.n	8003c74 <arm_cmplx_mag_squared_f32+0x8c>
 8003c94:	bc70      	pop	{r4, r5, r6}
 8003c96:	4770      	bx	lr

08003c98 <arm_radix8_butterfly_f32>:
 8003c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c9c:	ed2d 8b10 	vpush	{d8-d15}
 8003ca0:	461c      	mov	r4, r3
 8003ca2:	b09d      	sub	sp, #116	; 0x74
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	ed9f bac4 	vldr	s22, [pc, #784]	; 8003fbc <arm_radix8_butterfly_f32+0x324>
 8003cac:	9019      	str	r0, [sp, #100]	; 0x64
 8003cae:	921a      	str	r2, [sp, #104]	; 0x68
 8003cb0:	468b      	mov	fp, r1
 8003cb2:	931b      	str	r3, [sp, #108]	; 0x6c
 8003cb4:	468a      	mov	sl, r1
 8003cb6:	46a1      	mov	r9, r4
 8003cb8:	4607      	mov	r7, r0
 8003cba:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8003cbe:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8003cc2:	eb03 0508 	add.w	r5, r3, r8
 8003cc6:	195c      	adds	r4, r3, r5
 8003cc8:	00de      	lsls	r6, r3, #3
 8003cca:	191a      	adds	r2, r3, r4
 8003ccc:	9600      	str	r6, [sp, #0]
 8003cce:	1898      	adds	r0, r3, r2
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	9e00      	ldr	r6, [sp, #0]
 8003cd4:	9311      	str	r3, [sp, #68]	; 0x44
 8003cd6:	4401      	add	r1, r0
 8003cd8:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8003cdc:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8003ce0:	19be      	adds	r6, r7, r6
 8003ce2:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8003ce6:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8003cea:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8003cee:	9f00      	ldr	r7, [sp, #0]
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	eb06 0e07 	add.w	lr, r6, r7
 8003cf6:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8003cf8:	9302      	str	r3, [sp, #8]
 8003cfa:	3204      	adds	r2, #4
 8003cfc:	3104      	adds	r1, #4
 8003cfe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d02:	f04f 0c00 	mov.w	ip, #0
 8003d06:	edde 7a00 	vldr	s15, [lr]
 8003d0a:	edd6 6a00 	vldr	s13, [r6]
 8003d0e:	ed95 2a00 	vldr	s4, [r5]
 8003d12:	ed17 aa01 	vldr	s20, [r7, #-4]
 8003d16:	edd4 4a00 	vldr	s9, [r4]
 8003d1a:	ed90 5a00 	vldr	s10, [r0]
 8003d1e:	ed12 7a01 	vldr	s14, [r2, #-4]
 8003d22:	ed51 0a01 	vldr	s1, [r1, #-4]
 8003d26:	ee77 8a85 	vadd.f32	s17, s15, s10
 8003d2a:	ee76 3a87 	vadd.f32	s7, s13, s14
 8003d2e:	ee32 4a20 	vadd.f32	s8, s4, s1
 8003d32:	ee3a 3a24 	vadd.f32	s6, s20, s9
 8003d36:	ee33 6a84 	vadd.f32	s12, s7, s8
 8003d3a:	ee73 5a28 	vadd.f32	s11, s6, s17
 8003d3e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8003d42:	ee75 6a86 	vadd.f32	s13, s11, s12
 8003d46:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8003d4a:	ed47 6a01 	vstr	s13, [r7, #-4]
 8003d4e:	edc4 5a00 	vstr	s11, [r4]
 8003d52:	ed92 9a00 	vldr	s18, [r2]
 8003d56:	ed95 1a01 	vldr	s2, [r5, #4]
 8003d5a:	edd6 5a01 	vldr	s11, [r6, #4]
 8003d5e:	ed91 6a00 	vldr	s12, [r1]
 8003d62:	edd7 2a00 	vldr	s5, [r7]
 8003d66:	edd4 1a01 	vldr	s3, [r4, #4]
 8003d6a:	edde 6a01 	vldr	s13, [lr, #4]
 8003d6e:	edd0 9a01 	vldr	s19, [r0, #4]
 8003d72:	ee72 0a60 	vsub.f32	s1, s4, s1
 8003d76:	ee71 aa46 	vsub.f32	s21, s2, s12
 8003d7a:	ee35 2ac9 	vsub.f32	s4, s11, s18
 8003d7e:	ee37 0a60 	vsub.f32	s0, s14, s1
 8003d82:	ee32 8a2a 	vadd.f32	s16, s4, s21
 8003d86:	ee37 7a20 	vadd.f32	s14, s14, s1
 8003d8a:	ee32 2a6a 	vsub.f32	s4, s4, s21
 8003d8e:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8003d92:	ee75 5a89 	vadd.f32	s11, s11, s18
 8003d96:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8003d9a:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8003d9e:	ee31 6a06 	vadd.f32	s12, s2, s12
 8003da2:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8003da6:	ee32 1aa1 	vadd.f32	s2, s5, s3
 8003daa:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8003dae:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8003db2:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8003db6:	ee62 2a0b 	vmul.f32	s5, s4, s22
 8003dba:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8003dbe:	ee33 3a68 	vsub.f32	s6, s6, s17
 8003dc2:	ee36 0a88 	vadd.f32	s0, s13, s16
 8003dc6:	ee75 8a86 	vadd.f32	s17, s11, s12
 8003dca:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8003dce:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8003dd2:	ee74 6ae0 	vsub.f32	s13, s9, s1
 8003dd6:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8003dda:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8003dde:	ee75 4a27 	vadd.f32	s9, s10, s15
 8003de2:	ee71 5a49 	vsub.f32	s11, s2, s18
 8003de6:	ee31 2a09 	vadd.f32	s4, s2, s18
 8003dea:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003dee:	ee31 1aa2 	vadd.f32	s2, s3, s5
 8003df2:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8003df6:	ee73 0a06 	vadd.f32	s1, s6, s12
 8003dfa:	ee75 1ac4 	vsub.f32	s3, s11, s8
 8003dfe:	ee36 5a87 	vadd.f32	s10, s13, s14
 8003e02:	ee32 8a28 	vadd.f32	s16, s4, s17
 8003e06:	ee33 6a46 	vsub.f32	s12, s6, s12
 8003e0a:	ee34 4a25 	vadd.f32	s8, s8, s11
 8003e0e:	ee33 3a80 	vadd.f32	s6, s7, s0
 8003e12:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8003e16:	ee71 5a64 	vsub.f32	s11, s2, s9
 8003e1a:	ee72 6ae7 	vsub.f32	s13, s5, s15
 8003e1e:	ee32 2a68 	vsub.f32	s4, s4, s17
 8003e22:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8003e26:	ee74 4a81 	vadd.f32	s9, s9, s2
 8003e2a:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8003e2e:	44dc      	add	ip, fp
 8003e30:	45e2      	cmp	sl, ip
 8003e32:	ed87 8a00 	vstr	s16, [r7]
 8003e36:	ed84 2a01 	vstr	s4, [r4, #4]
 8003e3a:	441f      	add	r7, r3
 8003e3c:	edce 0a00 	vstr	s1, [lr]
 8003e40:	441c      	add	r4, r3
 8003e42:	ed80 6a00 	vstr	s12, [r0]
 8003e46:	edce 1a01 	vstr	s3, [lr, #4]
 8003e4a:	ed80 4a01 	vstr	s8, [r0, #4]
 8003e4e:	449e      	add	lr, r3
 8003e50:	ed86 3a00 	vstr	s6, [r6]
 8003e54:	4418      	add	r0, r3
 8003e56:	ed41 3a01 	vstr	s7, [r1, #-4]
 8003e5a:	ed02 5a01 	vstr	s10, [r2, #-4]
 8003e5e:	ed85 7a00 	vstr	s14, [r5]
 8003e62:	edc6 5a01 	vstr	s11, [r6, #4]
 8003e66:	edc1 4a00 	vstr	s9, [r1]
 8003e6a:	441e      	add	r6, r3
 8003e6c:	edc2 6a00 	vstr	s13, [r2]
 8003e70:	4419      	add	r1, r3
 8003e72:	edc5 7a01 	vstr	s15, [r5, #4]
 8003e76:	441a      	add	r2, r3
 8003e78:	441d      	add	r5, r3
 8003e7a:	f63f af44 	bhi.w	8003d06 <arm_radix8_butterfly_f32+0x6e>
 8003e7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003e80:	2a07      	cmp	r2, #7
 8003e82:	f240 81f5 	bls.w	8004270 <arm_radix8_butterfly_f32+0x5d8>
 8003e86:	f108 0101 	add.w	r1, r8, #1
 8003e8a:	188f      	adds	r7, r1, r2
 8003e8c:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8003e90:	19d6      	adds	r6, r2, r7
 8003e92:	eb08 0c09 	add.w	ip, r8, r9
 8003e96:	1994      	adds	r4, r2, r6
 8003e98:	eb0c 0e09 	add.w	lr, ip, r9
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	9701      	str	r7, [sp, #4]
 8003ea0:	4420      	add	r0, r4
 8003ea2:	eb0e 0709 	add.w	r7, lr, r9
 8003ea6:	1815      	adds	r5, r2, r0
 8003ea8:	eb07 0209 	add.w	r2, r7, r9
 8003eac:	9203      	str	r2, [sp, #12]
 8003eae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003eb0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003eb4:	9117      	str	r1, [sp, #92]	; 0x5c
 8003eb6:	440a      	add	r2, r1
 8003eb8:	9900      	ldr	r1, [sp, #0]
 8003eba:	3108      	adds	r1, #8
 8003ebc:	9100      	str	r1, [sp, #0]
 8003ebe:	9902      	ldr	r1, [sp, #8]
 8003ec0:	3108      	adds	r1, #8
 8003ec2:	9102      	str	r1, [sp, #8]
 8003ec4:	9919      	ldr	r1, [sp, #100]	; 0x64
 8003ec6:	00ff      	lsls	r7, r7, #3
 8003ec8:	9715      	str	r7, [sp, #84]	; 0x54
 8003eca:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8003ece:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8003ed2:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8003ed6:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8003ed8:	9903      	ldr	r1, [sp, #12]
 8003eda:	19d7      	adds	r7, r2, r7
 8003edc:	00c9      	lsls	r1, r1, #3
 8003ede:	9114      	str	r1, [sp, #80]	; 0x50
 8003ee0:	9710      	str	r7, [sp, #64]	; 0x40
 8003ee2:	9919      	ldr	r1, [sp, #100]	; 0x64
 8003ee4:	9f00      	ldr	r7, [sp, #0]
 8003ee6:	19cf      	adds	r7, r1, r7
 8003ee8:	970d      	str	r7, [sp, #52]	; 0x34
 8003eea:	9f02      	ldr	r7, [sp, #8]
 8003eec:	19cf      	adds	r7, r1, r7
 8003eee:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8003ef2:	970c      	str	r7, [sp, #48]	; 0x30
 8003ef4:	9f01      	ldr	r7, [sp, #4]
 8003ef6:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8003efa:	3504      	adds	r5, #4
 8003efc:	3004      	adds	r0, #4
 8003efe:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 8003f02:	9508      	str	r5, [sp, #32]
 8003f04:	9009      	str	r0, [sp, #36]	; 0x24
 8003f06:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8003f08:	981a      	ldr	r0, [sp, #104]	; 0x68
 8003f0a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8003f0e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8003f12:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 8003f16:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8003f18:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8003f1c:	1945      	adds	r5, r0, r5
 8003f1e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8003f22:	460f      	mov	r7, r1
 8003f24:	3404      	adds	r4, #4
 8003f26:	4641      	mov	r1, r8
 8003f28:	1841      	adds	r1, r0, r1
 8003f2a:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8003f2e:	940a      	str	r4, [sp, #40]	; 0x28
 8003f30:	eb00 0c06 	add.w	ip, r0, r6
 8003f34:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003f38:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8003f3a:	9506      	str	r5, [sp, #24]
 8003f3c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8003f3e:	9105      	str	r1, [sp, #20]
 8003f40:	4639      	mov	r1, r7
 8003f42:	1905      	adds	r5, r0, r4
 8003f44:	3108      	adds	r1, #8
 8003f46:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003f48:	9507      	str	r5, [sp, #28]
 8003f4a:	910f      	str	r1, [sp, #60]	; 0x3c
 8003f4c:	ea4f 1509 	mov.w	r5, r9, lsl #4
 8003f50:	2101      	movs	r1, #1
 8003f52:	eb00 0e06 	add.w	lr, r0, r6
 8003f56:	9518      	str	r5, [sp, #96]	; 0x60
 8003f58:	9404      	str	r4, [sp, #16]
 8003f5a:	9103      	str	r1, [sp, #12]
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	4689      	mov	r9, r1
 8003f60:	9e06      	ldr	r6, [sp, #24]
 8003f62:	ed90 fa00 	vldr	s30, [r0]
 8003f66:	edd6 7a01 	vldr	s15, [r6, #4]
 8003f6a:	edd0 ba01 	vldr	s23, [r0, #4]
 8003f6e:	edcd 7a00 	vstr	s15, [sp]
 8003f72:	a80d      	add	r0, sp, #52	; 0x34
 8003f74:	edde 7a01 	vldr	s15, [lr, #4]
 8003f78:	9c05      	ldr	r4, [sp, #20]
 8003f7a:	9d07      	ldr	r5, [sp, #28]
 8003f7c:	edd2 fa00 	vldr	s31, [r2]
 8003f80:	ed92 ca01 	vldr	s24, [r2, #4]
 8003f84:	edcd 7a01 	vstr	s15, [sp, #4]
 8003f88:	c807      	ldmia	r0, {r0, r1, r2}
 8003f8a:	eddc 7a01 	vldr	s15, [ip, #4]
 8003f8e:	edd4 ea00 	vldr	s29, [r4]
 8003f92:	ed95 ea00 	vldr	s28, [r5]
 8003f96:	edd6 da00 	vldr	s27, [r6]
 8003f9a:	edd4 aa01 	vldr	s21, [r4, #4]
 8003f9e:	ed95 aa01 	vldr	s20, [r5, #4]
 8003fa2:	ed9e da00 	vldr	s26, [lr]
 8003fa6:	eddc ca00 	vldr	s25, [ip]
 8003faa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fae:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003fb0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003fb2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003fb4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003fb6:	edcd 7a02 	vstr	s15, [sp, #8]
 8003fba:	e001      	b.n	8003fc0 <arm_radix8_butterfly_f32+0x328>
 8003fbc:	3f3504f3 	.word	0x3f3504f3
 8003fc0:	ed16 6a01 	vldr	s12, [r6, #-4]
 8003fc4:	ed91 5a00 	vldr	s10, [r1]
 8003fc8:	ed57 9a01 	vldr	s19, [r7, #-4]
 8003fcc:	edd5 7a00 	vldr	s15, [r5]
 8003fd0:	ed18 7a01 	vldr	s14, [r8, #-4]
 8003fd4:	edd2 3a00 	vldr	s7, [r2]
 8003fd8:	ed94 3a00 	vldr	s6, [r4]
 8003fdc:	ed90 2a00 	vldr	s4, [r0]
 8003fe0:	ed92 0a01 	vldr	s0, [r2, #4]
 8003fe4:	ee33 8a85 	vadd.f32	s16, s7, s10
 8003fe8:	ee32 1a06 	vadd.f32	s2, s4, s12
 8003fec:	ee33 4a29 	vadd.f32	s8, s6, s19
 8003ff0:	ee77 4a87 	vadd.f32	s9, s15, s14
 8003ff4:	ee78 1a04 	vadd.f32	s3, s16, s8
 8003ff8:	ee71 6a24 	vadd.f32	s13, s2, s9
 8003ffc:	ee32 2a46 	vsub.f32	s4, s4, s12
 8004000:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8004004:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004008:	ed82 6a00 	vstr	s12, [r2]
 800400c:	edd5 8a01 	vldr	s17, [r5, #4]
 8004010:	ed90 9a01 	vldr	s18, [r0, #4]
 8004014:	edd6 2a00 	vldr	s5, [r6]
 8004018:	ed98 7a00 	vldr	s14, [r8]
 800401c:	edd4 0a01 	vldr	s1, [r4, #4]
 8004020:	ed91 6a01 	vldr	s12, [r1, #4]
 8004024:	edd7 5a00 	vldr	s11, [r7]
 8004028:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800402c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8004030:	ee39 5a62 	vsub.f32	s10, s18, s5
 8004034:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8004038:	ee38 4a44 	vsub.f32	s8, s16, s8
 800403c:	ee38 7a87 	vadd.f32	s14, s17, s14
 8004040:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8004044:	ee79 2a22 	vadd.f32	s5, s18, s5
 8004048:	ee75 8a69 	vsub.f32	s17, s10, s19
 800404c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8004050:	ee35 5a29 	vadd.f32	s10, s10, s19
 8004054:	ee72 7a67 	vsub.f32	s15, s4, s15
 8004058:	ee30 2a06 	vadd.f32	s4, s0, s12
 800405c:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8004060:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8004064:	ee32 9a08 	vadd.f32	s18, s4, s16
 8004068:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800406c:	ee32 2a48 	vsub.f32	s4, s4, s16
 8004070:	ee71 4a64 	vsub.f32	s9, s2, s9
 8004074:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8004078:	ee32 1a87 	vadd.f32	s2, s5, s14
 800407c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8004080:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8004084:	ee30 6a46 	vsub.f32	s12, s0, s12
 8004088:	ee73 0a29 	vadd.f32	s1, s6, s19
 800408c:	ee36 0a28 	vadd.f32	s0, s12, s17
 8004090:	ee33 3a69 	vsub.f32	s6, s6, s19
 8004094:	ee32 7a64 	vsub.f32	s14, s4, s9
 8004098:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800409c:	ee36 6a68 	vsub.f32	s12, s12, s17
 80040a0:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80040a4:	ee75 8a85 	vadd.f32	s17, s11, s10
 80040a8:	ee74 3a22 	vadd.f32	s7, s8, s5
 80040ac:	ee35 5ac5 	vsub.f32	s10, s11, s10
 80040b0:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80040b4:	ee79 1a41 	vsub.f32	s3, s18, s2
 80040b8:	ee39 8aa8 	vadd.f32	s16, s19, s17
 80040bc:	ee76 5a43 	vsub.f32	s11, s12, s6
 80040c0:	ee74 2a62 	vsub.f32	s5, s8, s5
 80040c4:	ee74 4a82 	vadd.f32	s9, s9, s4
 80040c8:	ee30 4a60 	vsub.f32	s8, s0, s1
 80040cc:	ee79 8ae8 	vsub.f32	s17, s19, s17
 80040d0:	ee30 0a80 	vadd.f32	s0, s1, s0
 80040d4:	ee77 9a85 	vadd.f32	s19, s15, s10
 80040d8:	ee33 6a06 	vadd.f32	s12, s6, s12
 80040dc:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80040e0:	ee2e 2a21 	vmul.f32	s4, s28, s3
 80040e4:	ee2e 5a26 	vmul.f32	s10, s28, s13
 80040e8:	ee6f 0a23 	vmul.f32	s1, s30, s7
 80040ec:	ee2a 3a21 	vmul.f32	s6, s20, s3
 80040f0:	ee39 1a01 	vadd.f32	s2, s18, s2
 80040f4:	ee6a 6a26 	vmul.f32	s13, s20, s13
 80040f8:	ee2b 9a87 	vmul.f32	s18, s23, s14
 80040fc:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8004100:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8004104:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8004108:	ee35 3a03 	vadd.f32	s6, s10, s6
 800410c:	ee72 6a66 	vsub.f32	s13, s4, s13
 8004110:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8004114:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8004118:	ed9d 4a02 	vldr	s8, [sp, #8]
 800411c:	ed82 1a01 	vstr	s2, [r2, #4]
 8004120:	ee77 3a63 	vsub.f32	s7, s14, s7
 8004124:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8004128:	ed9d 7a01 	vldr	s14, [sp, #4]
 800412c:	ed81 3a00 	vstr	s6, [r1]
 8004130:	ee30 9a89 	vadd.f32	s18, s1, s18
 8004134:	ee32 2a05 	vadd.f32	s4, s4, s10
 8004138:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800413c:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8004140:	ee67 2a22 	vmul.f32	s5, s14, s5
 8004144:	ee64 1a00 	vmul.f32	s3, s8, s0
 8004148:	ee27 7a24 	vmul.f32	s14, s14, s9
 800414c:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8004150:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8004154:	ee64 8a28 	vmul.f32	s17, s8, s17
 8004158:	ed9d 4a00 	vldr	s8, [sp]
 800415c:	edc1 6a01 	vstr	s13, [r1, #4]
 8004160:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8004164:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8004168:	ee64 9a29 	vmul.f32	s19, s8, s19
 800416c:	ee24 4a25 	vmul.f32	s8, s8, s11
 8004170:	ee30 7a87 	vadd.f32	s14, s1, s14
 8004174:	ee74 4a84 	vadd.f32	s9, s9, s8
 8004178:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800417c:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8004180:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8004184:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8004188:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800418c:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8004190:	ee75 1a21 	vadd.f32	s3, s10, s3
 8004194:	ee30 0a68 	vsub.f32	s0, s0, s17
 8004198:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800419c:	ee70 0a84 	vadd.f32	s1, s1, s8
 80041a0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80041a4:	44d9      	add	r9, fp
 80041a6:	45ca      	cmp	sl, r9
 80041a8:	ed84 9a00 	vstr	s18, [r4]
 80041ac:	edc4 3a01 	vstr	s7, [r4, #4]
 80041b0:	441a      	add	r2, r3
 80041b2:	ed07 7a01 	vstr	s14, [r7, #-4]
 80041b6:	edc7 2a00 	vstr	s5, [r7]
 80041ba:	4419      	add	r1, r3
 80041bc:	ed80 2a00 	vstr	s4, [r0]
 80041c0:	ed80 8a01 	vstr	s16, [r0, #4]
 80041c4:	441c      	add	r4, r3
 80041c6:	ed48 1a01 	vstr	s3, [r8, #-4]
 80041ca:	ed88 0a00 	vstr	s0, [r8]
 80041ce:	441f      	add	r7, r3
 80041d0:	ed46 4a01 	vstr	s9, [r6, #-4]
 80041d4:	4418      	add	r0, r3
 80041d6:	edc6 9a00 	vstr	s19, [r6]
 80041da:	4498      	add	r8, r3
 80041dc:	edc5 0a00 	vstr	s1, [r5]
 80041e0:	ed85 6a01 	vstr	s12, [r5, #4]
 80041e4:	441e      	add	r6, r3
 80041e6:	441d      	add	r5, r3
 80041e8:	f63f aeea 	bhi.w	8003fc0 <arm_radix8_butterfly_f32+0x328>
 80041ec:	9a03      	ldr	r2, [sp, #12]
 80041ee:	9818      	ldr	r0, [sp, #96]	; 0x60
 80041f0:	3201      	adds	r2, #1
 80041f2:	4611      	mov	r1, r2
 80041f4:	9203      	str	r2, [sp, #12]
 80041f6:	9a04      	ldr	r2, [sp, #16]
 80041f8:	4402      	add	r2, r0
 80041fa:	9204      	str	r2, [sp, #16]
 80041fc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80041fe:	9a05      	ldr	r2, [sp, #20]
 8004200:	4402      	add	r2, r0
 8004202:	9205      	str	r2, [sp, #20]
 8004204:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004206:	9a07      	ldr	r2, [sp, #28]
 8004208:	4402      	add	r2, r0
 800420a:	9207      	str	r2, [sp, #28]
 800420c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800420e:	9a06      	ldr	r2, [sp, #24]
 8004210:	4402      	add	r2, r0
 8004212:	9206      	str	r2, [sp, #24]
 8004214:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004216:	4496      	add	lr, r2
 8004218:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800421a:	4494      	add	ip, r2
 800421c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800421e:	3208      	adds	r2, #8
 8004220:	920f      	str	r2, [sp, #60]	; 0x3c
 8004222:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004224:	3208      	adds	r2, #8
 8004226:	920e      	str	r2, [sp, #56]	; 0x38
 8004228:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800422a:	3208      	adds	r2, #8
 800422c:	920d      	str	r2, [sp, #52]	; 0x34
 800422e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004230:	3208      	adds	r2, #8
 8004232:	920c      	str	r2, [sp, #48]	; 0x30
 8004234:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004236:	3208      	adds	r2, #8
 8004238:	920b      	str	r2, [sp, #44]	; 0x2c
 800423a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800423c:	3208      	adds	r2, #8
 800423e:	920a      	str	r2, [sp, #40]	; 0x28
 8004240:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004242:	3208      	adds	r2, #8
 8004244:	9209      	str	r2, [sp, #36]	; 0x24
 8004246:	9a08      	ldr	r2, [sp, #32]
 8004248:	3208      	adds	r2, #8
 800424a:	9208      	str	r2, [sp, #32]
 800424c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800424e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004250:	4288      	cmp	r0, r1
 8004252:	4622      	mov	r2, r4
 8004254:	d007      	beq.n	8004266 <arm_radix8_butterfly_f32+0x5ce>
 8004256:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004258:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800425c:	4621      	mov	r1, r4
 800425e:	4401      	add	r1, r0
 8004260:	9110      	str	r1, [sp, #64]	; 0x40
 8004262:	9804      	ldr	r0, [sp, #16]
 8004264:	e67c      	b.n	8003f60 <arm_radix8_butterfly_f32+0x2c8>
 8004266:	4683      	mov	fp, r0
 8004268:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 800426c:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800426e:	e524      	b.n	8003cba <arm_radix8_butterfly_f32+0x22>
 8004270:	b01d      	add	sp, #116	; 0x74
 8004272:	ecbd 8b10 	vpop	{d8-d15}
 8004276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800427a:	bf00      	nop

0800427c <__libc_init_array>:
 800427c:	b570      	push	{r4, r5, r6, lr}
 800427e:	4d0d      	ldr	r5, [pc, #52]	; (80042b4 <__libc_init_array+0x38>)
 8004280:	4c0d      	ldr	r4, [pc, #52]	; (80042b8 <__libc_init_array+0x3c>)
 8004282:	1b64      	subs	r4, r4, r5
 8004284:	10a4      	asrs	r4, r4, #2
 8004286:	2600      	movs	r6, #0
 8004288:	42a6      	cmp	r6, r4
 800428a:	d109      	bne.n	80042a0 <__libc_init_array+0x24>
 800428c:	4d0b      	ldr	r5, [pc, #44]	; (80042bc <__libc_init_array+0x40>)
 800428e:	4c0c      	ldr	r4, [pc, #48]	; (80042c0 <__libc_init_array+0x44>)
 8004290:	f000 f82e 	bl	80042f0 <_init>
 8004294:	1b64      	subs	r4, r4, r5
 8004296:	10a4      	asrs	r4, r4, #2
 8004298:	2600      	movs	r6, #0
 800429a:	42a6      	cmp	r6, r4
 800429c:	d105      	bne.n	80042aa <__libc_init_array+0x2e>
 800429e:	bd70      	pop	{r4, r5, r6, pc}
 80042a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80042a4:	4798      	blx	r3
 80042a6:	3601      	adds	r6, #1
 80042a8:	e7ee      	b.n	8004288 <__libc_init_array+0xc>
 80042aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ae:	4798      	blx	r3
 80042b0:	3601      	adds	r6, #1
 80042b2:	e7f2      	b.n	800429a <__libc_init_array+0x1e>
 80042b4:	08017780 	.word	0x08017780
 80042b8:	08017780 	.word	0x08017780
 80042bc:	08017780 	.word	0x08017780
 80042c0:	08017784 	.word	0x08017784

080042c4 <memcpy>:
 80042c4:	440a      	add	r2, r1
 80042c6:	4291      	cmp	r1, r2
 80042c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80042cc:	d100      	bne.n	80042d0 <memcpy+0xc>
 80042ce:	4770      	bx	lr
 80042d0:	b510      	push	{r4, lr}
 80042d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042da:	4291      	cmp	r1, r2
 80042dc:	d1f9      	bne.n	80042d2 <memcpy+0xe>
 80042de:	bd10      	pop	{r4, pc}

080042e0 <memset>:
 80042e0:	4402      	add	r2, r0
 80042e2:	4603      	mov	r3, r0
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d100      	bne.n	80042ea <memset+0xa>
 80042e8:	4770      	bx	lr
 80042ea:	f803 1b01 	strb.w	r1, [r3], #1
 80042ee:	e7f9      	b.n	80042e4 <memset+0x4>

080042f0 <_init>:
 80042f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f2:	bf00      	nop
 80042f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042f6:	bc08      	pop	{r3}
 80042f8:	469e      	mov	lr, r3
 80042fa:	4770      	bx	lr

080042fc <_fini>:
 80042fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fe:	bf00      	nop
 8004300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004302:	bc08      	pop	{r3}
 8004304:	469e      	mov	lr, r3
 8004306:	4770      	bx	lr
